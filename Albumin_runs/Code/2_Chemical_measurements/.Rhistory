# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
for(i in 1:length(dat_list)){
# Subset to relevant data
dat <- dat_list[[i]]
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Add direction
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
if(i==1){
dat_top <- dat_top[1:15,]
}
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
library(tidyverse)
library(reticulate)
library(tidytext)
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Full.csv')
dat_full <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Full.csv')
dat_pca <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_PCA.csv')
dat_elastic <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
i<-1
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction))
dat <- dat_list[[i]]
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction))
View(dat_sum)
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
View(dat_sum)
View(dat_full)
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
# if (i == 1) {
#   dat_top <- dat_top[1:15, ]
# }
#
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
# if (i == 1) {
#   dat_top <- dat_top[1:15, ]
# }
#
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
View(combined_dat)
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(integrated_derivative)) %>%
select(chem, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
# if (i == 1) {
#   dat_top <- dat_top[1:15, ]
# }
#
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Clean up names for combined_dat
combined_dat <- combined_dat %>%
mutate(chem = str_remove(chem, pattern = '_')) %>%
mutate(chem = str_remove(chem, pattern = 'var26')) %>%
mutate(chem = ifelse(chem == 'Benzoapyrene', 'Benzo[a]pyrene', chem)) %>%
mutate(chem = ifelse(chem == 'Dimethylnaphthalene', '2,6-Dimethylnaphthalene', chem)) %>%
mutate(chem = ifelse(chem == 'Benzaanthracene', 'Benz(a)anthracene', chem)) %>%
mutate(chem = ifelse(chem == 'Methoxymethylphenol', 'Methoxymethyl phenol', chem))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Create the combined plot using facet_wrap and allowing each facet to have its own x-axis
p <- ggplot(combined_dat, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "darkred", "Negative" = "darkblue")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free") +
labs(x = 'Chemical')
p
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(integrated_derivative)) %>%
select(chem, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Clean up names for combined_dat
combined_dat <- combined_dat %>%
mutate(chem = str_remove(chem, pattern = '_')) %>%
mutate(chem = str_remove(chem, pattern = 'var26')) %>%
mutate(chem = ifelse(chem == 'Benzoapyrene', 'Benzo[a]pyrene', chem)) %>%
mutate(chem = ifelse(chem == 'Dimethylnaphthalene', '2,6-Dimethylnaphthalene', chem)) %>%
mutate(chem = ifelse(chem == 'Benzaanthracene', 'Benz(a)anthracene', chem)) %>%
mutate(chem = ifelse(chem == 'Methoxymethylphenol', 'Methoxymethyl phenol', chem))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Create the combined plot using facet_wrap and allowing each facet to have its own x-axis
p <- ggplot(combined_dat, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "darkred", "Negative" = "darkblue")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free") +
labs(x = 'Chemical')
p
plot_filename <- paste0('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/variable_importance_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
library(tidyverse)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\partial_deriv.csv')
dat <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\partial_deriv.csv')
View(dat)
dat_sum <- dat %>%
group_by(gene) %>%
mutate(sum_dir = sum(integrated_derivative)) %>%
select(gene, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positive", "Negative"))
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "darkred", "Negative" = "darkblue")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
View(dat_top)
View(dat_sum)
View(dat_sum)
View(dat)
plz <- dat %>%filter(gene == 'Csrnp_1_69505')
View(plz)
unique(plz$equation)
library(tidyverse)
dat <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\partial_deriv.csv')
dat_sum <- dat %>%
group_by(gene) %>%
mutate(sum_dir = sum(integrated_derivative)) %>%
select(gene, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positive", "Negative"))
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "darkred", "Negative" = "darkblue")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
plot_filename <- paste0('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 3.5, height = 4)
library(tidyverse)
library(reticulate)
library(tidytext)
library(tidyverse)
library(reticulate)
library(tidytext)
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\pysr\\variable_importance_Full.csv')
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\pysr\\variable_importance_Full.csv')
dat_pca <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\pysr\\variable_importance_PCA.csv')
dat_elastic <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\pysr\\variable_importance_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat%>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Clean up names for combined_dat
combined_dat <- combined_dat %>%
mutate(chem = str_remove(chem, pattern = '_')) %>%
mutate(chem = str_remove(chem, pattern = 'var26')) %>%
mutate(chem = ifelse(chem == 'Benzoapyrene', 'Benzo[a]pyrene', chem)) %>%
mutate(chem = ifelse(chem == 'Dimethylnaphthalene', '2,6-Dimethylnaphthalene', chem)) %>%
mutate(chem = ifelse(chem == 'Benzaanthracene', 'Benz(a)anthracene', chem)) %>%
mutate(chem = ifelse(chem == 'Methoxymethylphenol', 'Methoxymethyl phenol', chem))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Create the combined plot using facet_wrap and allowing each facet to have its own x-axis
p <- ggplot(combined_dat, aes(x = reorder(chem, -var_importance), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "darkred", "Negative" = "darkblue")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free") +
labs(x = 'Chemical')
p
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Alubmin_runs/images/2_Chemical_measurements/pysr/variable_importance_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albmuin_runs/images/2_Chemical_measurements/pysr/variable_importance_all.png')
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\rf\\rf_var_importance_Full.csv')
dat_pca <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\rf\\rf_var_importance_PCA.csv')
dat_elastic <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\rf\\rf_var_importance_Elastic.csv')
# Get top 15 from full
dat_full <- dat_full %>%
arrange(-Importance) %>%
.[1:15,]
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
names(dat_list) <- c('Full', 'PCA', 'Elastic net')
# Combine and add a column for the dataset name
dat_all <- bind_rows(
lapply(names(dat_list), function(name) {
dat_list[[name]] %>%
mutate(Dataset = name)
})
)
# Set order
dat_all$Dataset <- factor(dat_all$Dataset, levels = c('Full', 'PCA', 'Elastic net'))
p <- ggplot(dat_all, aes(x = reorder_within(Feature, -Importance, Dataset), y = Importance)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Importance") +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ Dataset, scales = "free_x", space = "free") +
scale_x_reordered() +  # Handles the reordered factors
scale_y_continuous(expand = c(0, 0)) +  # This removes the padding between bars and the x-axis
labs(x = 'Chemical')
p
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/images/2_Chemical_measurements/rf/variable_importance_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
reticulate::repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI\Albumin_runs")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
test_y_albumin = pd.read_pickle("Data_inputs/2_Chemical_measurements/Albumin/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_PCA")
test_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_PCA")
train_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Elastic")
test_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Elastic")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'Albumin']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic]
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI\Albumin_runs")
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
t
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI\Albumin_runs")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
test_y_albumin = pd.read_pickle("Data_inputs/2_Chemical_measurements/Albumin/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_PCA")
test_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_PCA")
train_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Elastic")
test_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Elastic")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic]
quit
# Assign the list from Python to R variables
input_names <- py$input_names
train_preds_list <- py$train_preds_list
test_preds_list <- py$test_preds_list
train_y <- py$train_y
test_y <- py$test_y
# Combine all testing data into a single DataFrame with identifiers for each dataset and input name
combined_test_dat <- do.call(rbind, lapply(seq_along(input_names), function(i) {
input_name <- input_names[[i]]
test_y_pred <- test_preds_list[[i]]
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' and 'input_name' as new columns to the DataFrame
test_df$Group <- Group
test_df$input_name <- input_name
return(test_df)
}))
combined_test_dat$input_name <- factor(combined_test_dat$input_name, levels = c('Full', 'PCA', 'Elastic'))
View(combined_test_dat)
# Define a custom color palette for the groups
custom_colors <- c(
"PineFlaming" = "#1b9e77",
"PeatFlaming" = "#d95f02",
"RedOakSmoldering" = "#7570b3",
"EucalyptusSmoldering" = "#e7298a",
"PineNeedlesFlaming" = "#66a61e",
"PineNeedlesSmoldering" = "#e6ab02",
"RedOakFlaming" = "#a6761d",
"EucalyptusFlaming" = "#666666",
"PineSmoldering" = "#1f78b4",
"PeatSmoldering" = "#b2df8a"
)
# Set up the box plot using facet_wrap for each input_name
p <- ggplot(combined_test_dat, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 3, byrow = TRUE)) +  # Adjust legend to have three rows
facet_wrap(~ input_name, scales = "free_x")
p
print(p)
# Save
plot_filename <- paste0('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/images/2_Chemical_measurements/pysr/Prediction_spread_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
print(p)
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/images/2_Chemical_measurements/pysr/Prediction_spread_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar <- ggplot(combined_test_dat, aes(x = rownames(combined_test_dat), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Predicted Injury Protein") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
facet_wrap(~ input_name, scales = "free_x") +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))
p_bar
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar <- ggplot(combined_test_dat, aes(x = rownames(combined_test_dat), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Predicted Injury Protein") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
facet_wrap(~ input_name, scales = "free_x") +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))  # Adjust legend to have three rows
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/images/2_Chemical_measurements/pysr/Prediction_vs_actual_all.png')
ggsave(plot_filename, p_bar, width = 7, height = 4)
