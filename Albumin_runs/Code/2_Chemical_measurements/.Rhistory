library(corrplot)
library(reticulate)
reticulate::repl_python()
import pickle
import pandas as pd
injury_df = pd.read_pickle("C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Data_inputs/2_Chemical_measurements/injury_df")
quit
data <- py$injury_df
data
# Read in the data
data <- py$injury_df %>%
as.data.frame()
View(data)
View(data)
library(gridExtra)
columns <- colnames(data)[colnames(data) != "Injury_Protein"]
# Create an empty list to store plots
plot_list <- list()
columns <- colnames(data)[colnames(data) != "Injury_Protein"]
# Create an empty list to store plots
plot_list <- list()
# Loop through each column and generate a scatter plot
for (col in columns) {
# Calculate R^2
formula <- as.formula(paste("Injury_Protein ~", col))
fit <- lm(formula, data = data)
r_squared <- summary(fit)$r.squared
# Create the scatter plot
p <- ggplot(data, aes_string(x = col, y = "Injury_Protein")) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Protein vs", col)) +
labs(x = col, y = "Injury_Protein") +
annotate("text", x = max(data[[col]]), y = max(data$Injury_Protein),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
# Add plot to list
plot_list[[length(plot_list) + 1]] <- p
}
formula <- as.formula(paste("Injury_Protein ~", col))
formula
fit <- lm(formula, data = data)
formula <- as.formula(paste("Injury_Protein ~ `", col, "`", sep = ""))
fit <- lm(formula, data = data)
r_squared <- summary(fit)$r.squared
columns <- colnames(data)[colnames(data) != "Injury_Protein"]
# Create an empty list to store plots
plot_list <- list()
# Loop through each column and generate a scatter plot
for (col in columns) {
# Calculate R^2
formula <- as.formula(paste("Injury_Protein ~ `", col, "`", sep = ""))
fit <- lm(formula, data = data)
r_squared <- summary(fit)$r.squared
# Create the scatter plot
p <- ggplot(data, aes_string(x = col, y = "Injury_Protein")) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Protein vs", col)) +
labs(x = col, y = "Injury_Protein") +
annotate("text", x = max(data[[col]]), y = max(data$Injury_Protein),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
# Add plot to list
plot_list[[length(plot_list) + 1]] <- p
}
# Create the scatter plot
p <- ggplot(data, aes_string(x = col, y = "Injury_Protein")) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Protein vs", col)) +
labs(x = col, y = "Injury_Protein") +
annotate("text", x = max(data[[col]]), y = max(data$Injury_Protein),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
formula <- as.formula(paste("Injury_Protein ~ `", col, "`", sep = ""))
fit <- lm(formula, data = data)
r_squared <- summary(fit)$r.squared
p <- ggplot(data, aes_string(x = col, y = "Injury_Protein")) +
geom_point(color = "blue")
# Create the scatter plot
p <- ggplot(data, aes_string(x = `col`, y = "Injury_Protein")) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Protein vs", col)) +
labs(x = col, y = "Injury_Protein") +
annotate("text", x = max(data[[col]]), y = max(data$Injury_Protein),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
# Create the scatter plot
p <- ggplot(df, aes(x = .data[[col]], y = Injury_Protein)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Protein vs", col)) +
labs(x = col, y = "Injury_Protein") +
annotate("text", x = max(data[[col]]), y = max(data$Injury_Protein),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
# Create the scatter plot
p <- ggplot(data, aes(x = .data[[col]], y = Injury_Protein)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Protein vs", col)) +
labs(x = col, y = "Injury_Protein") +
annotate("text", x = max(data[[col]]), y = max(data$Injury_Protein),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
p
columns <- colnames(data)[colnames(data) != "Injury_Protein"]
# Create an empty list to store plots
plot_list <- list()
# Loop through each column and generate a scatter plot
for (col in columns) {
# Calculate R^2
formula <- as.formula(paste("Injury_Protein ~ `", col, "`", sep = ""))
fit <- lm(formula, data = data)
r_squared <- summary(fit)$r.squared
# Create the scatter plot
p <- ggplot(data, aes(x = .data[[col]], y = Injury_Protein)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Protein vs", col)) +
labs(x = col, y = "Injury_Protein") +
annotate("text", x = max(data[[col]]), y = max(data$Injury_Protein),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
# Add plot to list
plot_list[[length(plot_list) + 1]] <- p
}
# Save plots to a PDF file
pdf("C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/Data_distributions/scatter_plots.pdf", width = 11, height = 8.5)
# Save plots to a PDF file
pdf("C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\images\\Data_distributions\\scatter_plots.pdf", width = 11, height = 8.5)
pdf("C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\images\\2_Chemical_measurements\\Data_distributions\\scatter_plots.pdf", width = 11, height = 8.5)
for (i in seq(1, length(plot_list), by = 6)) {
do.call(grid.arrange, c(plot_list[i:min(i+5, length(plot_list))], ncol = 2))
}
dev.off()
reticulate::repl_python()
injury_df = pd.read_pickle("C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/Data_inputs/2_Chemical_measurements/injury_df")
quit
data <- py$injury_df %>%
as.data.frame()
View(data)
reticulate::repl_python()
import pickle
import pandas as pd
injury_df = pd.read_pickle("C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Data_inputs/2_Chemical_measurements/injury_df")
injury_df_albumin = pd.read_pickle("C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Data_inputs/2_Chemical_measurements/injury_df")
quit
data <- py$injury_df %>%
as.data.frame()
data_albumin <- py$injury_df_albumin %>%
as.data.frame()
View(data_albumin)
reticulate::repl_python()
injury_df_albumin = pd.read_pickle("C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/Data_inputs/2_Chemical_measurements/injury_df")
quit
data_albumin <- py$injury_df_albumin %>%
as.data.frame()
View(data_albumin)
# Generate scatter plots for Injury_Albumin
columns_albumin <- colnames(data_albumin)[colnames(data_albumin) != "Injury_Albumin"]
plot_list_albumin <- list()
for (col in columns_albumin) {
# Calculate R^2
formula <- as.formula(paste("Injury_Albumin ~ `", col, "`", sep = ""))
fit <- lm(formula, data = data_albumin)
r_squared <- summary(fit)$r.squared
# Create scatter plot
p <- ggplot(data_albumin, aes(x = .data[[col]], y = Injury_Albumin)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("Injury_Albumin vs", col)) +
labs(x = col, y = "Injury_Albumin") +
annotate("text", x = max(data_albumin[[col]], na.rm = TRUE),
y = max(data_albumin$Injury_Albumin, na.rm = TRUE),
label = paste("R^2 =", round(r_squared, 2)), hjust = 1)
# Add plot to the list
plot_list_albumin[[length(plot_list_albumin) + 1]] <- p
}
# Save to a separate PDF
pdf("C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\images\\Data_distributions\\scatter_plots_albumin.pdf", width = 11, height = 8.5)
pdf("C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\images\\2_Chemical_measurements\\Data_distributions\\scatter_plots_albumin.pdf", width = 11, height = 8.5)
for (i in seq(1, length(plot_list_albumin), by = 6)) {
do.call(grid.arrange, c(plot_list_albumin[i:min(i+5, length(plot_list_albumin))], ncol = 2))
}
dev.off()
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\variable_importance.csv')
degs <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Data_inputs\\3_Omic_measurements\\DEGs.csv')
View(degs)
degs <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
View(degs)
View(degs)
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
View(degs_clean)
dat_top <- dat %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset to top 15
dat_top <- dat_top[1:15,]
View(dat_top)
View(dat)
colnames(degs_clean)[1] <- 'gene'
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'genes')
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene')
View(dat_clean)
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
-select(gene)
View(dat_clean)
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(gene)
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene)
View(dat_clean)
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene)
colnames(dat_clean)[2] <- 'gene'
# Add directionality
dat_top <- dat %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset to top 15
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -var_importance), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
# Add directionality
dat_top <- dat_clean %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset to top 15
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -var_importance), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
View(dat_clean)
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene')
View(dat_clean)
View(degs_clean)
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
View(dat_clean)
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_clean)[2] <- 'gene'
View(dat_clean)
# Add directionality
dat_top <- dat_clean %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset to top 15
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -var_importance), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 3.5, height = 4)
library(tidyverse)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\3_Omic_measurements\\variable_importance.csv')
degs <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_clean)[2] <- 'gene'
# Add directionality
dat_top <- dat_clean %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset to top 15
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -var_importance), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/images/3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 3.5, height = 4)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\rf\\rf_var_importance.csv')
View(dat)
View(dat_clean)
colnames(degs_clean)[2] <- 'Feature'
View(dat_clean)
View(degs_clean)
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
View(degs_clean)
colnames(degs_clean)[1] <- 'Feature'
dat_clean <- left_join(dat, degs_clean, by = 'Feature')
View(dat_clean)
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'Feature') %>%
select(-Feature) %>%
unique()
View(dat_clean)
View(degs)
colnames(degs)[1] <- 'Feature'
dat_clean <- left_join(dat, degs_clean, by = 'Feature') %>%
select(-Feature) %>%
unique()
dat_clean <- left_join(dat, degs_clean, by = 'Feature')
View(dat_clean)
View(degs)
View(dat)
dat_clean <- left_join(dat, degs_clean, by = 'Feature')
View(dat_clean)
dat_clean[1,1]
# Merge with data
dat_clean <- left_join(dat, degs, by = 'Feature') %>%
select(-Feature) %>%
unique()
View(dat_clean)
View(dat_clean)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\rf\\rf_var_importance.csv')
# Apply to biospyder IDs
colnames(degs)[1] <- 'Feature'
# Merge with data
dat_clean <- left_join(dat, degs, by = 'Feature') %>%
select(-Feature) %>%
unique()
colnames(dat_clean)[2] <- 'Feature'
# Get top 15 from full
dat_full <- dat_clean %>%
arrange(-Importance) %>%
.[1:15,]
View(dat_full)
dat_all$Dataset <- factor(dat_all$Dataset, levels = c('Full', 'PCA', 'Elastic net'))
p <- ggplot(dat_all, aes(x = reorder_within(Feature, -Importance, Dataset), y = Importance)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Importance") +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ Dataset, scales = "free_x", space = "free") +
scale_x_reordered() +  # Handles the reordered factors
scale_y_continuous(expand = c(0, 0)) +  # This removes the padding between bars and the x-axis
labs(x = 'Chemical')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
p <- ggplot(dat_full, aes(x = reorder(Feature, -Importance), y = Importance)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Importance") +
theme_classic()
p
p <- ggplot(dat_full, aes(x = reorder(Feature, -Importance), y = Importance)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Importance") +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_x_reordered() +  # Handles the reordered factors
scale_y_continuous(expand = c(0, 0)) +  # This removes the padding between bars and the x-axis
labs(x = 'Gene')
p
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/rf/variable_importance_all.png')
ggsave(plot_filename, p, width = 4, height = 4)
# Plot
p <- ggplot(dat_full, aes(x = reorder(Feature, -Importance), y = Importance)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Importance") +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_x_reordered() +  # Handles the reordered factors
scale_y_continuous(expand = c(0, 0))
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/rf/variable_importance_all.png')
ggsave(plot_filename, p, width = 4, height = 4)
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/rf/variable_importance_all.png')
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/rf/variable_importance_all.png')
ggsave(plot_filename, p, width = 4, height = 4)
