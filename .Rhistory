install.packages("limma")
library(limma)
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
# # Convert FTS to numeric
# data[,23] <- as.numeric(data[,23])
# Remove PFAS with low detection
remove <- c("PFUdA (ng/mL)", "PFTeDA (ng/mL)", "4:2 FTS (ng/mL)", "6:2 FTS (ng/mL)", "PFPeA (ng/mL)", "PFHxA (ng/mL)", "HFPO-DA (ng/mL)", "PFBA")
data <- data %>%
select(-all_of(remove))
# Edit dx column
data <- data %>%
mutate(DX1 = case_when(
grepl("sibling", DX1, ignore.case = TRUE) ~ "sibling",
grepl("hc", DX1, ignore.case = TRUE) ~ "control",
TRUE ~ "diseased"
))
# Run linear model for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Fit the linear model
lm_result <- lm(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(lm_result)$coefficients["DX1", "Pr(>|t|)"]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
# # Convert FTS to numeric
# data[,23] <- as.numeric(data[,23])
# Remove PFAS with low detection
remove <- c("PFUdA (ng/mL)", "PFTeDA (ng/mL)", "4:2 FTS (ng/mL)", "6:2 FTS (ng/mL)", "PFPeA (ng/mL)", "PFHxA (ng/mL)", "HFPO-DA (ng/mL)", "PFBA")
data <- data %>%
select(-all_of(remove))
# Edit dx column
data <- data %>%
mutate(DX1 = case_when(
grepl("sibling", DX1, ignore.case = TRUE) ~ "sibling",
grepl("hc", DX1, ignore.case = TRUE) ~ "control",
TRUE ~ "diseased"
))
# Run linear model for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Fit the linear model
lm_result <- lm(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(lm_result)$coefficients["DX1", "Pr(>|t|)"]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
pfas_measure <- names(data)[i]
# Run linear model for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Fit the linear model
lm_result <- lm(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(lm_result)$coefficients["DX1", "Pr(>|t|)"]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Fit the linear model
lm_result <- lm(formula, data = data)
p_value <- summary(lm_result)$coefficients["DX1", "Pr(>|t|)"]
summary(lm_result)
#Run ANOVA for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Run the ANOVA
aov_result <- aov(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
# View the results dataframe
print(results)
View(results)
# Correct p-values
results$p_value <- p.adjust(results$p_value, method = 'BH')
# View the results dataframe
print(results)
View(results)
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
# # Convert FTS to numeric
# data[,23] <- as.numeric(data[,23])
# Remove PFAS with low detection
remove <- c("PFUdA (ng/mL)", "PFTeDA (ng/mL)", "4:2 FTS (ng/mL)", "6:2 FTS (ng/mL)", "PFPeA (ng/mL)", "PFHxA (ng/mL)", "HFPO-DA (ng/mL)", "PFBA")
data <- data %>%
select(-all_of(remove))
# Edit dx column
data <- data %>%
mutate(DX1 = case_when(
grepl("sibling", DX1, ignore.case = TRUE) ~ "sibling",
grepl("hc", DX1, ignore.case = TRUE) ~ "control",
TRUE ~ "diseased"
))
#Run ANOVA for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#`"))
# Run the ANOVA
aov_result <- aov(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
# Correct p-values
results$p_value <- p.adjust(results$p_value, method = 'BH')
# View the results dataframe
print(results)
View(results)
View(data)
# Loop through each PFAS measurement and create a boxplot
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Create the boxplot
p <- ggplot(data, aes_string(x = "DX1", y = pfas_measure)) +
geom_boxplot(aes(fill = DX1)) +    # Boxplot colored by DX1 group
geom_jitter(width = 0.2, alpha = 0.6) +  # Add jittered points for individual data
labs(title = paste("Boxplot of", pfas_measure, "by DX1 Group"),
x = "DX1 Group",
y = pfas_measure) +
theme_minimal()
# Display the plot
print(p)
}
library(tidyverse)
# Loop through each PFAS measurement and create a boxplot
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Create the boxplot
p <- ggplot(data, aes_string(x = "DX1", y = pfas_measure)) +
geom_boxplot(aes(fill = DX1)) +    # Boxplot colored by DX1 group
geom_jitter(width = 0.2, alpha = 0.6) +  # Add jittered points for individual data
labs(title = paste("Boxplot of", pfas_measure, "by DX1 Group"),
x = "DX1 Group",
y = pfas_measure) +
theme_minimal()
# Display the plot
print(p)
}
pfas_measure <- names(data)[i]
#Run ANOVA for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Run the ANOVA
aov_result <- aov(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
# Correct p-values
results$p_value <- p.adjust(results$p_value, method = 'BH')
# View the results dataframe
print(results)
# Create the boxplot
p <- ggplot(data, aes_string(x = "DX1", y = `pfas_measure`)) +
geom_boxplot(aes(fill = DX1)) +    # Boxplot colored by DX1 group
geom_jitter(width = 0.2, alpha = 0.6) +  # Add jittered points for individual data
labs(title = paste("Boxplot of", pfas_measure, "by DX1 Group"),
x = "DX1 Group",
y = pfas_measure) +
theme_minimal()
p
# Loop through each PFAS measurement and create a boxplot
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Create the boxplot
p <- ggplot(data, aes_string(x = "DX1", y = pfas_measure)) +
geom_boxplot(aes(fill = DX1)) +    # Boxplot colored by DX1 group
geom_jitter(width = 0.2, alpha = 0.6) +  # Add jittered points for individual data
labs(title = paste("Boxplot of", pfas_measure, "by DX1 Group"),
x = "DX1 Group",
y = pfas_measure) +
theme_minimal()
# Display the plot
print(p)
}
install.packages('rlang')
install.packages("rlang")
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
library(readxl)
library(dplyr)
library(car)
library(tidyverse)
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
# # Convert FTS to numeric
# data[,23] <- as.numeric(data[,23])
# Remove PFAS with low detection
remove <- c("PFUdA (ng/mL)", "PFTeDA (ng/mL)", "4:2 FTS (ng/mL)", "6:2 FTS (ng/mL)", "PFPeA (ng/mL)", "PFHxA (ng/mL)", "HFPO-DA (ng/mL)", "PFBA")
data <- data %>%
select(-all_of(remove))
# Edit dx column
data <- data %>%
mutate(DX1 = case_when(
grepl("sibling", DX1, ignore.case = TRUE) ~ "sibling",
grepl("hc", DX1, ignore.case = TRUE) ~ "control",
TRUE ~ "diseased"
))
#Run ANOVA for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Run the ANOVA
aov_result <- aov(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
# Correct p-values
results$p_value <- p.adjust(results$p_value, method = 'BH')
# View the results dataframe
print(results)
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
# # Convert FTS to numeric
# data[,23] <- as.numeric(data[,23])
# Remove PFAS with low detection
remove <- c("PFUdA (ng/mL)", "PFTeDA (ng/mL)", "4:2 FTS (ng/mL)", "6:2 FTS (ng/mL)", "PFPeA (ng/mL)", "PFHxA (ng/mL)", "HFPO-DA (ng/mL)", "PFBA")
data <- data %>%
select(-all_of(remove))
# Edit dx column
data <- data %>%
mutate(DX1 = case_when(
grepl("sibling", DX1, ignore.case = TRUE) ~ "sibling",
grepl("hc", DX1, ignore.case = TRUE) ~ "control",
TRUE ~ "diseased"
))
#Run ANOVA for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Run the ANOVA
aov_result <- aov(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
# Correct p-values
results$p_value <- p.adjust(results$p_value, method = 'BH')
# View the results dataframe
print(results)
# Save dataframe
write.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\anova_results.csv')
# Save dataframe
write.csv(results, 'C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\anova_results.csv')
View(data)
data <- read_excel(file_path) %>%
.[1:156,]
View(data)
View(data)
# Remove PFAS with low detection
remove <- c("PFUdA (ng/mL)", "PFTeDA (ng/mL)", "4:2 FTS (ng/mL)", "6:2 FTS (ng/mL)", "PFPeA (ng/mL)", "PFHxA (ng/mL)", "HFPO-DA (ng/mL)", "PFBA")
data <- data %>%
select(-all_of(remove))
# Edit dx column
# Create the function to modify DX1
modify_DX1 <- function(df) {
df <- df %>%
mutate(
DX1 = case_when(
row_number() %% 3 == 1 ~ as.character(DX1),
row_number() %% 3 == 2 ~ paste0("sibling_", DX1[1]),
row_number() %% 3 == 0 ~ paste0("Con_", DX1[1])
)
)
return(df)
}
# Apply the function to the dataframe
data <- data %>%
group_by(grp = rep(1:(nrow(data) / 3), each = 3)) %>%
mutate(DX1 = modify_DX1(cur_data())$DX1) %>%
ungroup() %>%
select(-grp)  # Remove the temporary grouping column if needed
View(data)
table(data$DX1)
156/3
dx1_groups <- unique(data$DX1)
# Define custom groups based on DX1 values
data <- data %>%
mutate(
Disease_Group = case_when(
grepl("ADM", DX1) ~ "ADM",
grepl("RA", DX1) ~ "RA",
grepl("JDM", DX1) ~ "JDM",
grepl("SLE", DX1) ~ "SLE",
grepl("SSC", DX1) ~ "SSC",
TRUE ~ "Other"
)
)
View(data)
# Initialize results dataframe
results <- data.frame(PFAS = character(), Disease_Group = character(), p_value = numeric(), stringsAsFactors = FALSE)
# Start column index for PFAS measurements
start_col <- 16
# Get unique Disease Groups
disease_groups <- unique(data$Disease_Group)
# Loop through each Disease Group
for (group in disease_groups) {
# Filter data for the current Disease Group
group_data <- data %>% filter(Disease_Group == group)
# Loop through each PFAS measurement column
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Run the ANOVA
aov_result <- aov(formula, data = group_data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, Disease_Group = group, p_value = p_value))
}
}
#Load the data
file_path <- "C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\Master_df.xlsx"
data <- read_excel(file_path) %>%
.[1:156,]
# # Convert FTS to numeric
# data[,23] <- as.numeric(data[,23])
# Remove PFAS with low detection
remove <- c("PFUdA (ng/mL)", "PFTeDA (ng/mL)", "4:2 FTS (ng/mL)", "6:2 FTS (ng/mL)", "PFPeA (ng/mL)", "PFHxA (ng/mL)", "HFPO-DA (ng/mL)", "PFBA")
data <- data %>%
select(-all_of(remove))
# Edit dx column
data <- data %>%
mutate(DX1 = case_when(
grepl("sibling", DX1, ignore.case = TRUE) ~ "sibling",
grepl("hc", DX1, ignore.case = TRUE) ~ "control",
TRUE ~ "diseased"
))
#Run ANOVA for each PFAS measurement and collect p-values
results <- data.frame(PFAS = character(), p_value = numeric(), stringsAsFactors = FALSE)
start_col <- 16  # PFAS measurements start at column 16
for (i in start_col:ncol(data)) {
pfas_measure <- names(data)[i]
# Define the formula
formula <- as.formula(paste0("`", pfas_measure, "` ~ DX1 + `Trios#` + Age + GENDER + State"))
# Run the ANOVA
aov_result <- aov(formula, data = data)
# Extract the p-value for the DX1 variable (group effect)
p_value <- summary(aov_result)[[1]][["Pr(>F)"]][1]
# Append to results dataframe
results <- rbind(results, data.frame(PFAS = pfas_measure, p_value = p_value))
}
# Correct p-values
results$p_value <- p.adjust(results$p_value, method = 'BH')
# View the results dataframe
print(results)
# Save dataframe
write.csv( results,'C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\PFAS_autoimmune\\anova_results.csv')
360/40
70000/12
4564/70000/12
4564/5833.33
shiny::runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
library(tinytex)
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
tinytex::is_tinytex()  # Should return TRUE if TinyTeX is correctly installed
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
tinytex::install_tinytex()
file.show("C:/Users/JESSIE~1/AppData/Local/Temp/RtmpGCFTuv/file12dc15472edf.log")
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
tinytex::install_tinytex()
Y
tinytex::install_tinytex()
y
Y
tinytex::tlmgr_update()
shiny::runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
tinytex::reinstall_tinytex()  # Reinstall TinyTeX
tinytex::tlmgr_update()       # Update TinyTeX packages
shiny::runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
runApp('practice')
tinytex::uninstall_tinytex()
library(tinytex)
tinytex_root()
tinytex::install_tinytex()
tinytex::tinytex_root()
shiny::runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
tinytex::tlmgr_update()
tinytex::tlmgr_install(c("amsmath", "xcolor", "geometry", "hyperref", "fancyhdr"))
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
shiny::runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
shiny::runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
runApp('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Confidence_level_app/Confidence_level_assignment')
library(tidyverse)
library(reticulate)
repl_python()
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Lasso")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Lasso")
import pandas as pd
import pickle
# Set working directoryimport os
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
import os
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Lasso")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Lasso")
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
import pandas as pd
import pickle
# Set working directory
import os
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Lasso")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Lasso")
test_y_pred
import pandas as pd
import pickle
# Set working directory
import os
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred_lasso = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Lasso")
test_y_pred_lasso = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Lasso")
import pandas as pd
import pickle
# Set working directory
import os
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred_lasso = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Lasso")
test_y_pred_lasso = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Lasso")
train_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_PCA")
test_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_PCA")
