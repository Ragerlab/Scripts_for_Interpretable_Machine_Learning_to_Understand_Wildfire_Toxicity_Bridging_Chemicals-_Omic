cols10 <- c(
"AC" = "#4A4492",
"ANA" = "#D2691E",
"CL" = "#FF00FF",
"Cer" = "#DAA520",
"DG" = "darkgrey",
"FA" = "#FF4500",
"Hex" = "#9ACD32",
"LPA" = "#860D0D",
"LPC" = "#379B8A",
"LPE" = "#153453",
"LPE(O/P-)" = "#8B4513",
"LPI" = "#B83500",
"PA" = "#B81818",
"PC" = "#00BFFF",
"PC(O/P-)" = "#9CDCD1",
"PE" = "#FF1493",
"PE(O/P-)" = "#4682B4",
"PI" = "#8A2BE2",
"PS" = "#9370DB",
"SM" = "#FF8C00",
"TG" = "#A9A9A9"
)
# Generate Circular Dendrogram with thinner lines
t4 <- ggtree(tupgma, layout = "circular", size = 0.5) # Adjusted size to 0.5 for thinner lines
# Merging circular dendrogram with p-value color assignments
t4 <- t4 %<+% cmpds +
geom_tippoint(aes(color = HG), size = 1, alpha = 0.6, shape = 16) +
scale_color_manual(values = cols10) +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(text = element_text(size = 0.01)) +
geom_treescale(x = NULL, y = NULL, width = 0.5, offset = -0.02,
color = "white", linesize = 1E-100, fontsize = 1E-100)
# Adjust the offset to bring the heatmap closer to the circular dendrogram
t4 <- gheatmap(t4, sub, offset = -0.02, width = 0.1, colnames = T, colnames_angle = 50) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
# Save to PNG
file <- "Dendrogram_all.png"
png(file = file, width = 10, height = 10, res = 300, units = "in")
print(t4)
dev.off()
df <- read.csv("G:\\My Drive\\Epidermal_lipid_collab\\smiles.csv", stringsAsFactors = F)
# Hierarchical clustering of all lipids
sum(df$smi == "")
df.c <- df[df$smi != "", ]
df.na <- df[df$smi == "", ]
fing <- parse.smiles(df.c$smi)
fing <- lapply(fing, get.fingerprint, type = "circular")
fp.sim <- fp.sim.matrix(fing)
row.names(fp.sim) <- df.c$abbrev
fp.dist <- as.dist(1 - fp.sim)
cls <- hclust(fp.dist)
plot(cls)
# Filter down to significant lipids and then cluster again
all_sig <- dat #%>%
# filter(Significant == 'Yes')
all_sig$Lipid <- sub("/", "_", all_sig$Lipid) # When assigning smiles, all '/' are changed to '_', this line changes input data to match
sig_lipids <- unique(all_sig$Lipid)
df <- df[(df$abbrev %in% sig_lipids), ]
# Hierarchical clustering of just significant lipids
sum(df$smi == "")
df.c <- df[df$smi != "", ]
df.na <- df[df$smi == "", ]
fing <- parse.smiles(df.c$smi)
fing <- lapply(fing, get.fingerprint, type = "circular")
fp.sim <- fp.sim.matrix(fing)
row.names(fp.sim) <- df.c$abbrev
fp.dist <- as.dist(1 - fp.sim)
cls <- hclust(fp.dist, method = 'average')
plot(cls)
#Loading lipid clustering
tupgma <- upgma(fp.dist, method = "average")
## Building Log2FC heatmaps of statistically significant lipids
# Format data to match SCOPE
sig_df <- dat %>%
# filter(Significant == 'Yes') %>%
mutate(flag = ifelse(P > 0.05, 0,
ifelse(P < 0.05 & Log2FC < 0, -1,
ifelse(P < 0.05 & Log2FC > 0, 1, NA)))) %>%
select(Lipid, Log2FC, flag)
sig_df$Lipid <- sub("/", "_", sig_df$Lipid)
lipids <- sig_df$Lipid
sig_df <- unique(sig_df)
rownames(sig_df) <- sig_df$Lipid
sig_df$Lipid <- NULL
# Change fold-change of all non-significant lipids to zero
sig_df <- sig_df %>%
mutate(Log2FC = ifelse(flag == 0, 0, Log2FC))
# Generate color gradient
sub <- sig_df %>%
select(Log2FC)
breaks <- seq(from=-5, to=5, length.out=10000)
midpoint <- which.min(abs(breaks - 0))
rampCol1 <- colorRampPalette(c("#002060", "#0d78ca", "#00e8f0"))(midpoint)
rampCol2 <- colorRampPalette(c("#FF4D4D", "red", "darkred"))(10000 - midpoint)
rampCols <- c(rampCol1, "grey70", rampCol2)
# Lipid Dendrogram -- Identifications annotated
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p <- open_tree(p, angle = 3)
p <- gheatmap(p, sub, width = .25, font.size = 1.5, colnames = F) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
p
View(sub)
sub <- sig_df
View(sig_df)
View(lipid_class_annotation)
sub$Class <- lipid_class_annotation$Class
p <- gheatmap(p, sub, width = .25, font.size = 1.5, colnames = F) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
p
sub <- sig_df %>%
select(Log2FC)
p <- gheatmap(p, sub, width = .25, font.size = 1.5, colnames = F) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
p
# Change fold-change of all non-significant lipids to zero
sig_df <- sig_df %>%
mutate(Log2FC = ifelse(flag == 0, 0, Log2FC))
# Generate color gradient
sub <- sig_df %>%
select(Log2FC)
breaks <- seq(from=-5, to=5, length.out=10000)
midpoint <- which.min(abs(breaks - 0))
rampCol1 <- colorRampPalette(c("#002060", "#0d78ca", "#00e8f0"))(midpoint)
rampCol2 <- colorRampPalette(c("#FF4D4D", "red", "darkred"))(10000 - midpoint)
rampCols <- c(rampCol1, "grey70", rampCol2)
# Lipid Dendrogram -- Identifications annotated
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p <- open_tree(p, angle = 3)
file <- "..\\Epidermal_lipid_collab\\Dendrogram_annotated.png"
png(file = file, width = 10, height = 10, res = 300, units = "in")
open_tree(p, 50) %>% rotate_tree(50)
dev.off()
p <- gheatmap(p, sub, width = .25, font.size = 1.5, colnames = F) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
p
# Integrating node annotation by lipid class
sig_df_1 <- sig_df %>%
mutate(Class = substr(rownames(.), 1, 3)) %>% # Grab first 3 letters of lipid name
mutate(Class = str_replace(.$Class, " ", "")) %>% # Remove spaces
mutate(Class = gsub("[()]", "", .$Class)) %>% # Remove parentheses
mutate(Class = ifelse(str_detect(rownames(.), "PC\\(O"), "PC(O/P-)", Class)) %>%
mutate(Class = ifelse(str_detect(rownames(.), "PE\\(O"), "PE(O/P-)", Class)) %>%
mutate(Class = ifelse(str_detect(rownames(.), "LPE\\(O"), "LPE(O/P-)", Class)) %>%
mutate(Class = ifelse(str_detect(rownames(.), "LPC\\(O"), "LPC(O/P-)", Class)) %>%
mutate(Class = ifelse(Class == 'Hex', 'HexCer', Class))
cmpds <- sig_df_1 %>%
select(Class) %>%
rownames_to_column(., var = 'Name')
colnames(cmpds)[2] <- 'HG'
# Colors for lipid classes
cols10 <- c(
"AC" = "#4A4492",
"ANA" = "#D2691E",
"CL" = "#FF00FF",
"Cer" = "#DAA520",
"DG" = "darkgrey",
"FA" = "#FF4500",
"Hex" = "#9ACD32",
"LPA" = "#860D0D",
"LPC" = "#379B8A",
"LPE" = "#153453",
"LPE(O/P-)" = "#8B4513",
"LPI" = "#B83500",
"PA" = "#B81818",
"PC" = "#00BFFF",
"PC(O/P-)" = "#9CDCD1",
"PE" = "#FF1493",
"PE(O/P-)" = "#4682B4",
"PI" = "#8A2BE2",
"PS" = "#9370DB",
"SM" = "#FF8C00",
"TG" = "#A9A9A9"
)
# Generate Circular Dendrogram with thinner lines
t4 <- ggtree(tupgma, layout = "circular", size = 0.5) # Adjusted size to 0.5 for thinner lines
t4 <- t4 %<+% cmpds +
geom_tile(aes(color = HG), size = 1, alpha = 0.6, shape = 16)
t4
# Merging circular dendrogram with p-value color assignments
t4 <- t4 %<+% cmpds +
geom_tile(aes(color = HG), size = 1, alpha = 0.6, shape = 16) +
scale_color_manual(values = cols10) +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(text = element_text(size = 0.01)) +
geom_treescale(x = NULL, y = NULL, width = 0.5, offset = -0.02,
color = "white", linesize = 1E-100, fontsize = 1E-100)
t4
View(cmpds)
# Generate Circular Dendrogram with thinner lines
t4 <- ggtree(tupgma, layout = "circular", size = 0.5) # Adjusted size to 0.5 for thinner lines
# Merging circular dendrogram with p-value color assignments
t4 <- t4 %<+% cmpds +
geom_tile(aes(color = HG), size = 1, alpha = 0.6, shape = 16) +
scale_color_manual(values = cols10) +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(text = element_text(size = 0.01)) +
geom_treescale(x = NULL, y = NULL, width = 0.5, offset = -0.02,
color = "white", linesize = 1E-100, fontsize = 1E-100)
t4
t4 <- gheatmap(t4, sub, offset = -0.02, width = 0.1, colnames = T, colnames_angle = 50) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
t4
# Save to PNG
file <- "Dendrogram_all.png"
png(file = file, width = 10, height = 10, res = 300, units = "in")
print(t4)
dev.off()
# Generate Circular Dendrogram with thinner lines
t4 <- ggtree(tupgma, layout = "circular", size = 0.5) # Adjusted size to 0.5 for thinner lines
# Merging circular dendrogram with p-value color assignments
t4 <- t4 %<+% cmpds +
geom_tile(aes(color = HG), size = 1, alpha = 0.6, shape = 16) +
scale_color_manual(values = cols10) +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(text = element_text(size = 0.01)) +
geom_treescale(x = NULL, y = NULL, width = 0.5, offset = 0,
color = "white", linesize = 1E-100, fontsize = 1E-100)
# Adjust the offset to bring the heatmap closer to the circular dendrogram
t4 <- gheatmap(t4, sub, offset = 0, width = 0.1, colnames = T, colnames_angle = 50) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
# Save to PNG
file <- "Dendrogram_all.png"
png(file = file, width = 10, height = 10, res = 300, units = "in")
print(t4)
dev.off()
# Merging circular dendrogram with p-value color assignments
t4 <- t4 %<+% cmpds +
geom_tippoint(aes(color = HG), size = 1, alpha = 0.6, shape = 16) +
scale_color_manual(values = cols10) +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(text = element_text(size = 0.01)) +
geom_treescale(x = NULL, y = NULL, width = 0.5, offset = 0,
color = "white", linesize = 1E-100, fontsize = 1E-100)
t4 <- gheatmap(t4, sub, offset = 0, width = 0.1, colnames = T, colnames_angle = 50) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
t4
# Generate Circular Dendrogram with thinner lines
t4 <- ggtree(tupgma, layout = "circular", size = 0.5) # Adjusted size to 0.5 for thinner lines
# Merging circular dendrogram with p-value color assignments
t4 <- t4 %<+% cmpds +
geom_tippoint(aes(color = HG), size = 1, alpha = 0.6, shape = 16) +
scale_color_manual(values = cols10) +
theme(legend.position = "bottom", legend.text = element_text(size = 10)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(text = element_text(size = 0.01)) +
geom_treescale(x = NULL, y = NULL, width = 0.5, offset = 0,
color = "white", linesize = 1E-100, fontsize = 1E-100)
# Adjust the offset to bring the heatmap closer to the circular dendrogram
t4 <- gheatmap(t4, sub, offset = 0, width = 0.1, colnames = T, colnames_angle = 50) +
scale_fill_gradient2(low = rampCol1, mid = "grey70", high = rampCol2, midpoint = 0, na.value = "grey70")
# Save to PNG
file <- "Dendrogram_all.png"
png(file = file, width = 10, height = 10, res = 300, units = "in")
print(t4)
dev.off()
View(sub)
View(cmpds)
# Lipid Dendrogram -- Identifications annotated
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p <- open_tree(p, angle = 3)
View(p)
View(p[["data"]])
p[["mapping"]]
p[["theme"]]
p[["labels"]]
# Save to PNG
file <- "Dendrogram_all.pdf"
pdf(file = file, width = 10, height = 10, res = 300, units = "in")
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p
p <- ggtree(tupgma, size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p
file <- "..\\Epidermal_lipid_collab\\Dendrogram_annotated.png"
png(file = file, width = 10, height = 10, res = 300, units = "in")
p
# open_tree(p, 50) %>% rotate_tree(50)
dev.off()
# Lipid Dendrogram -- Identifications annotated
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p <- open_tree(p, angle = 3)
file <- "..\\Epidermal_lipid_collab\\Dendrogram_annotated.png"
png(file = file, width = 10, height = 10, res = 300, units = "in")
open_tree(p, 50) %>% rotate_tree(50)
dev.off()
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
View(fp.sim)
cls <- hclust(fp.dist, method = 'average')
plot(cls)
plt(cls)
plot(cls)
View(cls)
plz <- cls[["labels"]]
plz <- cls[["labels"]] %>% as.data.frame()
View(plz)
cls[["order"]]
plz$order <- cls[["order"]]
View(plz)
tupgma <- upgma(fp.dist, method = "average")
tupgma
View(tupgma)
tupgma[["tip.label"]]
# Lipid Dendrogram -- Identifications annotated
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p <- open_tree(p, angle = 3)
file <- "..\\Epidermal_lipid_collab\\Dendrogram_annotated.pdf"
# Save the tree plot as a PDF
pdf(file = file, width = 10, height = 10)
open_tree(p, 50) %>% rotate_tree(50)
dev.off()
df <- read.csv("G:\\My Drive\\Epidermal_lipid_collab\\smiles_v2.csv", stringsAsFactors = F)
# Hierarchical clustering of all lipids
sum(df$smi == "")
df.c <- df[df$smi != "", ]
df.na <- df[df$smi == "", ]
fing <- parse.smiles(df.c$smi)
fing <- lapply(fing, get.fingerprint, type = "circular")
fp.sim <- fp.sim.matrix(fing)
row.names(fp.sim) <- df.c$abbrev
fp.dist <- as.dist(1 - fp.sim)
cls <- hclust(fp.dist)
plot(cls)
# Dendrogram of all identified lipids, structurally related using an ECFP_6 fingerprint, Euclidean distance and average linkage method.
# save.image("..\\fp_all_lipid.rdata")
# Filter down to significant lipids and then cluster again
all_sig <- dat #%>%
# filter(Significant == 'Yes')
all_sig$Lipid <- sub("/", "_", all_sig$Lipid) # When assigning smiles, all '/' are changed to '_', this line changes input data to match
sig_lipids <- unique(all_sig$Lipid)
df <- df[(df$abbrev %in% sig_lipids), ]
# Hierarchical clustering of just significant lipids
sum(df$smi == "")
df.c <- df[df$smi != "", ]
df.na <- df[df$smi == "", ]
fing <- parse.smiles(df.c$smi)
fing <- lapply(fing, get.fingerprint, type = "circular")
fp.sim <- fp.sim.matrix(fing)
row.names(fp.sim) <- df.c$abbrev
fp.dist <- as.dist(1 - fp.sim)
cls <- hclust(fp.dist, method = 'average')
plot(cls)
#Dendrogram of all identified lipids, structurally related using an ECFP_6 fingerprint, Euclidian distance and average linkage method.
# save.image("..\\fp_sig_lipid.rdata")
#Loading lipid clustering
tupgma <- upgma(fp.dist, method = "average")
## Building Log2FC heatmaps of statistically significant lipids
# Format data to match SCOPE
sig_df <- dat %>%
# filter(Significant == 'Yes') %>%
mutate(flag = ifelse(P > 0.05, 0,
ifelse(P < 0.05 & Log2FC < 0, -1,
ifelse(P < 0.05 & Log2FC > 0, 1, NA)))) %>%
select(Lipid, Log2FC, flag)
sig_df$Lipid <- sub("/", "_", sig_df$Lipid)
lipids <- sig_df$Lipid
sig_df <- unique(sig_df)
rownames(sig_df) <- sig_df$Lipid
sig_df$Lipid <- NULL
# Change fold-change of all non-significant lipids to zero
sig_df <- sig_df %>%
mutate(Log2FC = ifelse(flag == 0, 0, Log2FC))
# Generate color gradient
sub <- sig_df %>%
select(Log2FC)
breaks <- seq(from=-5, to=5, length.out=10000)
midpoint <- which.min(abs(breaks - 0))
rampCol1 <- colorRampPalette(c("#002060", "#0d78ca", "#00e8f0"))(midpoint)
rampCol2 <- colorRampPalette(c("#FF4D4D", "red", "darkred"))(10000 - midpoint)
rampCols <- c(rampCol1, "grey70", rampCol2)
# Lipid Dendrogram -- Identifications annotated
p <- ggtree(tupgma, layout="circular", size=1, branch.length="none")
p <- p + geom_text(aes(label = label, angle = angle, fontface = "bold"), hjust = -0.15, size = 1.65)
p <- open_tree(p, angle = 3)
file <- "..\\Epidermal_lipid_collab\\Dendrogram_annotated.pdf"
# Save the tree plot as a PDF
pdf(file = file, width = 10, height = 10)
open_tree(p, 50) %>% rotate_tree(50)
dev.off()
dat <- read.csv('G:\\My Drive\\Epidermal_lipid_collab\\CKOB_Adjusted_Stats_jsh.csv') %>%
mutate(Lipid = gsub(Lipid, pattern = ' P', replacement = 'P'))
smile_ref1 <- read.csv('G:\\My Drive\\average\\PFAS_lipid_collab\\Data_subsets\\MSC_all_smiles_manual.csv') %>% select (-X)
smile_ref2 <- read.csv('G:\\My Drive\\average\\PFAS_lipid_collab\\Data_subsets\\NSC_all_smiles_manual.csv') %>% select (-X)
log(-21)
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\jrchapp3\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
os.chdir(r"C:\Users\jrchapp3\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
import pandas as pd
i
import panadas as pd
import pandas as pd
quit
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
```----
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
ggsave('images/2_Chemical_measurements/pysr/prediction_spread.png', p)
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/prediction_spread.png',p)
ggsave('../images/2_Chemical_measurements/pysr/prediction_spread.png',p)
setwd('C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI')
setwd('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI')
ggsave('../images/2_Chemical_measurements/pysr/prediction_spread.png',p)
setwd('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI')
ggsave('../images/2_Chemical_measurements/pysr/prediction_spread.png',p)
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/prediction_spread.png',p)
