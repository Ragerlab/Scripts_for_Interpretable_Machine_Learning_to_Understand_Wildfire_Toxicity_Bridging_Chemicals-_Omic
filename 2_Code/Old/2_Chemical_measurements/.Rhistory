guides(fill = guide_legend(nrow = 3, byrow = TRUE))  # Adjust legend to have three rows
# Save the plot
plot_filename_scatter <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/Actual_vs_Predicted_difference.png')
ggsave(plot_filename_scatter, p_bar_two, width = 7, height = 4)
# Set up the box plot using facet_wrap for each input_name
p <- ggplot(combined_test_dat, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 3, byrow = TRUE)) +  # Adjust legend to have three rows
facet_wrap(~ input_name, scales = "free_x")
# Print the combined plot
print(p)
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/Prediction_spread_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar_two <- ggplot(combined_test_dat, aes(x = rownames(combined_test_dat), y = Dif, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
labs(x = "Individual", y = "Actual - Predicted (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
facet_wrap(~ input_name, scales = "free_x") +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))  # Adjust legend to have three rows
# Save the plot
plot_filename_scatter <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/Actual_vs_Predicted_difference.png')
ggsave(plot_filename_scatter, p_bar_two, width = 7, height = 4)
library(tidyverse)
dat <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\variable_importance.csv')
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\variable_importance.csv')
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\variable_importance.csv')
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\variable_importance.csv')
dat_sum <- dat %>%
group_by(gene) %>%
mutate(sum_dir = sum(integrated_derivative)) %>%
select(gene, sum_dir) %>%
unique()
View(dat)
dat_top <- dat %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positive", "Negative"))
View(dat)
dat_top <- dat %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset to top 15
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -var_importance), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 3.5, height = 4)
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\jrchapp3\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/3_Omic_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/3_Omic_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/training_predictions")
test_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/test_predictions")
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/3_Omic_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/3_Omic_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/training_predictions")
test_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/test_predictions")
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Clean up group labels
test_df$Group <- gsub("Smoldering", "Smold.", test_df$Group)
test_df$Group <- gsub("Flaming", "Flam.", test_df$Group)
test_df$Group <- gsub("([a-z])([A-Z])", "\\1 \\2", test_df$Group)
# Define a custom color palette for the groups
custom_colors <- c(
"Pine Flam." = "#1b9e77",
"Peat Flam." = "#d95f02",
"Red Oak Smold." = "#7570b3",
"Eucalyptus Smold." = "#e7298a",
"Pine Needles Flam." = "#66a61e",
"Pine Needles Smold." = "#e6ab02",
"Red Oak Flam." = "#a6761d",
"Eucalyptus Flam." = "#666666",
"Pine Smold." = "#1f78b4",
"Peat Smold." = "#b2df8a"
)
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_fill_manual(values = custom_colors)
p
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/prediction_spread.png',p)
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/prediction_spread.png',p, width = 7, height = 4)
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_fill_manual(values = custom_colors) +
guides(fill = guide_legend(nrow = 3, byrow = TRUE)) +  # Adjust legend to have three rows
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/prediction_spread.png',p, width = 7, height = 4)
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_fill_manual(values = custom_colors) +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))   # Adjust legend to have three rows
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/prediction_spread.png',p, width = 7, height = 4)
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_fill_manual(values = custom_colors) +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))   # Adjust legend to have three rows
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/prediction_spread.png',p, width = 7, height = 4)
View(test_df)
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar <- ggplot(test_df, aes(x = rownames(test_df), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Measured Injury Protein (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
facet_wrap(~ input_name, scales = "free_x") +
guides(fill = guide_legend(nrow = 3, byrow = TRUE))
p_bar
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar <- ggplot(test_df, aes(x = rownames(test_df), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Measured Injury Protein (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 3, byrow = TRUE))  # Adjust legend to have three rows
p_bar
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar <- ggplot(test_df, aes(x = rownames(test_df), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Measured Injury Protein (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 3, byrow = TRUE))  # Adjust legend to have three rows
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/Prediction_vs_actual_all.png')
ggsave(plot_filename, p_bar, width = 7, height = 4)
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/Prediction_vs_actual_all.png')
ggsave(plot_filename, p_bar, width = 3.5, height = 4)
7
p_bar_two <- ggplot(test_df, aes(x = rownames(test_df), y = Dif, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
labs(x = "Individual", y = "Actual - Predicted (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 3, byrow = TRUE))
p_bar_two
plot_filename_scatter <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/Actual_vs_Predicted_difference.png')
ggsave(plot_filename_scatter, p_bar_two, width = 7, height = 4)
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_PCA")
test_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_PCA")
train_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Elastic")
test_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Elastic")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic]
quit
library(Metrics)
install.packages('Metrics')
library(Metrics)
# Assign the list from Python to R variables
input_names <- py$input_names
train_preds_list <- py$train_preds_list
test_preds_list <- py$test_preds_list
train_y <- py$train_y
test_y <- py$test_y
# Combine all testing data into a single DataFrame with identifiers for each dataset and input name
combined_test_dat <- do.call(rbind, lapply(seq_along(input_names), function(i) {
input_name <- input_names[[i]]
test_y_pred <- test_preds_list[[i]]
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Calculate % error
test_df <- test_df %>%
mutate(perc_error = (Predicted - Actual)/ Predicted * 100)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' and 'input_name' as new columns to the DataFrame
test_df$Group <- Group
test_df$input_name <- input_name
return(test_df)
}))
# Define levels
combined_test_dat$input_name <- factor(combined_test_dat$input_name, levels = c('Full', 'PCA', 'Elastic'))
# Clean up group labels
combined_test_dat$Group <- gsub("Smoldering", "Smold.", combined_test_dat$Group)
combined_test_dat$Group <- gsub("Flaming", "Flam.", combined_test_dat$Group)
combined_test_dat$Group <- gsub("([a-z])([A-Z])", "\\1 \\2", combined_test_dat$Group)
rmse(combined_test_dat$Actual, combined_test_dat$Predicted)
# Calculate normalized RMSE
nrmse <- rmse(combined_test_dat$Actual, combined_test_dat$Predicted) / (max(combined_test_dat$Actual)- min(combined_test_dat$Actual))
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI\Albumin_runs")
# Load in data
train_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Full")
test_y_pred = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Full")
train_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_PCA")
test_y_pred_pca = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_PCA")
train_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/training_predictions_Elastic")
test_y_pred_elastic = pd.read_pickle("Data_inputs/2_Chemical_measurements/test_predictions_Elastic")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic]
quit
# Assign the list from Python to R variables
input_names <- py$input_names
train_preds_list <- py$train_preds_list
test_preds_list <- py$test_preds_list
train_y <- py$train_y
test_y <- py$test_y
# Combine all testing data into a single DataFrame with identifiers for each dataset and input name
combined_test_dat <- do.call(rbind, lapply(seq_along(input_names), function(i) {
input_name <- input_names[[i]]
test_y_pred <- test_preds_list[[i]]
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Calculate % error
test_df <- test_df %>%
mutate(perc_error = (Predicted - Actual)/ Predicted * 100)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' and 'input_name' as new columns to the DataFrame
test_df$Group <- Group
test_df$input_name <- input_name
return(test_df)
}))
# Calculate normalized RMSE
nrmse <- rmse(combined_test_dat$Actual, combined_test_dat$Predicted) / (max(combined_test_dat$Actual)- min(combined_test_dat$Actual))
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\jrchapp3\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/3_Omic_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/3_Omic_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/training_predictions")
test_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/test_predictions")
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/3_Omic_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/3_Omic_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/training_predictions")
test_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/test_predictions")
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Calculate normalized RMSE
nrmse <- rmse(test_df$Actual, test_df$Predicted) / (max(test_df$Actual)- min(test_df$Actual))
rmse(test_df$Actual, test_df$Predicted)
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI\Albumin_runs")
# Load in data
train_y = pd.read_pickle("Data_inputs/3_Omic_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/3_Omic_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/training_predictions")
test_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/test_predictions")
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Calculate normalized RMSE
nrmse <- rmse(test_df$Actual, test_df$Predicted) / (max(test_df$Actual)- min(test_df$Actual))
rmse(test_df$Actual, test_df$Predicted)
reticulate::repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/3_Omic_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/3_Omic_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/training_predictions")
test_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/test_predictions")
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
View(test_df)
