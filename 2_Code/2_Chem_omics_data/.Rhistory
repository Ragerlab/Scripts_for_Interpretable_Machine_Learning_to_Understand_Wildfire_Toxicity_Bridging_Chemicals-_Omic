geom_bar(stat = "identity") +
labs(x = "Chemical", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Ensures reordered labels are handled properly
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(~dataset, scales = "free", space = "free")  # Ensure each facet scales independently
print(p)
p <- ggplot(plz3, aes(x = reorder_within(Chemical, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chemical", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(~dataset, scales = "free", space = "free")  # Ensure each facet scales independently
p
p <- ggplot(plz3, aes(x = reorder_within(Chemical, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Predictor", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(~dataset, scales = "free", space = "free")
p
library(tidyverse)
library(reticulate)
library(Metrics)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_train_y")
test_y = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_test_y")
train_y_pred = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_training_predictions_pysr_Full")
test_y_pred = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_test_predictions_pysr_Full")
train_y_pred_pca = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_training_predictions_pysr_PCA")
test_y_pred_pca = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_test_predictions_pysr_PCA")
train_y_pred_elastic = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_training_predictions_pysr_Elastic")
test_y_pred_elastic = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/Omic_test_predictions_pysr_Elastic")
train_y_pred_rf = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/training_predictions_rf_Full")
test_y_pred_rf = pd.read_pickle("3_Data_intermediates/3_Omic_measurements/test_predictions_rf_Full")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'RF']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic, test_y_pred_rf]
View(train_y_pred_elastic)
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
test_combined <- data.frame(
Predicted = test_preds_list[[1]][9, 'Predictions'][[1]],
Actual = test_y
)
test_preds_list <- py$test_preds_list
View(test_preds_list)
test_combined <- data.frame(
Predicted = test_preds_list[[3]][9, 'Predictions'][[1]],
Actual = test_y
)
View(test_combined)
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Calculate normalized RMSE
nrmse <- rmse(test_df$Actual, test_df$Predicted) / (max(test_df$Actual)- min(test_df$Actual))
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Clean up group labels
test_df$Group <- gsub("Smoldering", "Smold.", test_df$Group)
test_df$Group <- gsub("Flaming", "Flam.", test_df$Group)
test_df$Group <- gsub("([a-z])([A-Z])", "\\1 \\2", test_df$Group)
# Define the custom group order
custom_order <- c("Red Oak Flam.", "Pine Flam.", "Peat Flam.", "Pine Needles Flam.", "Pine Needles Smold.", "Eucalyptus Smold.", "Eucalyptus Flam.", "Red Oak Smold.", "Pine Smold.", "Peat Smold.")
custom_order <- rev(custom_order)  # Reverse the order
# Update the Group variable with the custom order
test_df$Group <- factor(test_df$Group, levels = custom_order)
# Arrange the data by 'Group' and then by 'Actual' in descending order
test_df <- test_df %>%
arrange(desc(Group), desc(Actual))
# Update the x-axis with the reordered factor levels
test_df$rownames <- factor(rownames(test_df), levels = rownames(test_df))
# Define a custom color palette for the groups
custom_colors <- c(
"Pine Flam." = "#1b9e77",
"Peat Flam." = "#d95f02",
"Red Oak Smold." = "#7570b3",
"Eucalyptus Smold." = "#e7298a",
"Pine Needles Flam." = "#66a61e",
"Pine Needles Smold." = "#e6ab02",
"Red Oak Flam." = "#a6761d",
"Eucalyptus Flam." = "#666666",
"Pine Smold." = "#1f78b4",
"Peat Smold." = "#b2df8a"
)
# Plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
scale_fill_manual(values = custom_colors)
p
p_bar <- ggplot(test_df, aes(x = test_df$rownames, y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Measured Injury Protein (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 14),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 4, byrow = TRUE))
p_bar
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar <- ggplot(test_df, aes(x = test_df$rownames, y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Measured Injury Protein (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 4, byrow = TRUE))  # Adjust legend to have three rows
p
p_bar
# Set up the bar plot using facet_wrap for each input_name, using Individual_ID as the x-axis
p_bar <- ggplot(test_df, aes(x = test_df$rownames, y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Measured Injury Protein (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 4, byrow = TRUE))  # Adjust legend to have three rows
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/5_Plots/3_Omic_measurements/Prediction_vs_actual_all.png')
ggsave(plot_filename, p_bar, width = 4, height = 4)
View(test_df)
plz <- test_df %>% mutate(dataset = 'Transcriptomic Data')
p_bar <- ggplot(test_df, aes(x = test_df$rownames, y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Measured Injury Protein (ng/mL)") +
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(values = custom_colors) +  # Apply the custom color palette
guides(fill = guide_legend(nrow = 4, byrow = TRUE))  # Adjust legend to have three rows
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/5_Plots/3_Omic_measurements/Prediction_vs_actual_all.png')
ggsave(plot_filename, p_bar, width = 4, height = 4)
reticulate::repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_train_y")
test_y = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_test_y")
train_y_pred = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_training_predictions_pysr_Full")
test_y_pred = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_test_predictions_pysr_Full")
train_y_pred_pca = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_training_predictions_pysr_PCA")
test_y_pred_pca = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_test_predictions_pysr_PCA")
train_y_pred_elastic = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_training_predictions_pysr_Elastic")
test_y_pred_elastic = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/Chem_test_predictions_pysr_Elastic")
train_y_pred_rf = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/training_predictions_rf_Full")
test_y_pred_rf = pd.read_pickle("3_Data_intermediates/2_Chemical_measurements/test_predictions_rf_Full")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'RF']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic, test_y_pred_rf]
quit
# Assign the list from Python to R variables
input_names <- py$input_names
train_preds_list <- py$train_preds_list
test_preds_list <- py$test_preds_list
train_y <- py$train_y
test_y <- py$test_y
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Predicted = test_preds_list[[1]][14, 'Predictions'][[1]],
Actual = test_y
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Calculate % error
test_df <- test_df %>%
mutate(perc_error = (Predicted - Actual)/ Predicted * 100)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' and 'input_name' as new columns to the DataFrame
test_df$Group <- Group
View(test_df)
plz2 <- test_df %>% mutate(dataset = 'Chemical Data')
View(plz)
View(plz2)
View(plz)
plz2 <- plz2 %>% select(-rownames)
plz <- plz %>% select(-rownames)
plz3 <- rbind(plz, plz2)
plz2<-plz2 %>% select(-perc_error)
plz3 <- rbind(plz, plz2)
View(plz3)
p <- ggplot(plz3, aes(x = plz3$rownames, y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
labs(x = "Individual", y = "Measured Injury Protein (mg/mL)") +
geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom",
legend.spacing.y = unit(0.2, "cm"),
legend.justification = c(0, 0), # Moves the legend to the left
legend.box.just = "left"        # Aligns the legend within the box
) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = custom_colors) +
facet_grid(~dataset, scales = "free", space = "free")  # Ensure each facet scales independently
p
View(plz3)
p <- ggplot(plz3, aes(x = rownames(plz3), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
labs(x = "Individual", y = "Measured Injury Protein (mg/mL)") +
geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom",
legend.spacing.y = unit(0.2, "cm"),
legend.justification = c(0, 0), # Moves the legend to the left
legend.box.just = "left"        # Aligns the legend within the box
) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = custom_colors) +
facet_grid(~dataset, scales = "free", space = "free")  # Ensure each facet scales independently
p
plz3$Group <- gsub("Smoldering", "Smold.", plz3$Group)
plz3$Group <- gsub("Flaming", "Flam.", plz3$Group)
plz3$Group <- gsub("([a-z])([A-Z])", "\\1 \\2", plz3$Group)
p <- ggplot(plz3, aes(x = rownames(plz3), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
labs(x = "Individual", y = "Measured Injury Protein (mg/mL)") +
geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom",
legend.spacing.y = unit(0.2, "cm"),
legend.justification = c(0, 0), # Moves the legend to the left
legend.box.just = "left"        # Aligns the legend within the box
) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = custom_colors) +
facet_grid(~dataset, scales = "free", space = "free")
p
# geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
# geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
p <- ggplot(plz3, aes(x = rownames(plz3), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
labs(x = "Individual", y = "Measured Injury Protein (mg/mL)") +
# geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom",
legend.spacing.y = unit(0.2, "cm"),
legend.justification = c(0, 0), # Moves the legend to the left
legend.box.just = "left"        # Aligns the legend within the box
) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = custom_colors) +
facet_grid(~dataset, scales = "free", space = "free")
p
p <- ggplot(plz3, aes(x = rownames(plz3), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
labs(x = "Individual", y = "Measured Injury Protein (mg/mL)") +
geom_point(aes(y = Predicted), color = "red", size = 5, shape = 95) +  # Red dash for 'Predicted'
theme_classic() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom",
legend.spacing.y = unit(0.2, "cm"),
legend.justification = c(0, 0), # Moves the legend to the left
legend.box.just = "left"        # Aligns the legend within the box
) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = custom_colors) +
facet_grid(~dataset, scales = "free", space = "free")
p
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\jrchapp3\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_train_y")
test_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_y")
train_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_Full")
test_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_Full")
train_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_PCA")
test_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_PCA")
train_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_Elastic")
test_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_Elastic")
train_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/training_predictions_rf_Full")
test_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/test_predictions_rf_Full")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'RF']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic, test_y_pred_rf]
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_train_y")
test_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_y")
train_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_Full")
test_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_Full")
train_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_PCA")
test_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_PCA")
train_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_Elastic")
test_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_Elastic")
train_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/training_predictions_rf_Full")
test_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/test_predictions_rf_Full")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'RF']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic, test_y_pred_rf]
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
train_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_train_y")
t
train_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_train_y")
t
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_train_y")
test_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_y")
train_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_Full")
test_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_Full")
train_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_PCA")
test_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_PCA")
train_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_Elastic")
test_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_predictions_pysr_Elastic")
train_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/training_predictions_rf_Full")
test_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/test_predictions_rf_Full")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'RF']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic, test_y_pred_rf]
train_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_training_predictions_pysr_Full")
t
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_train_y")
test_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_y")
train_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_training_predictions_pysr_Full")
test_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_test_predictions_pysr_Full")
train_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_training_predictions_pysr_PCA")
test_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_test_predictions_pysr_PCA")
train_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_training_predictions_pysr_Elastic")
test_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_test_predictions_pysr_Elastic")
train_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/training_predictions_rf_Full")
test_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/test_predictions_rf_Full")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'RF']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic, test_y_pred_rf]
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
test_preds_list <- py$test_preds_list
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Predicted = test_preds_list[[3]][9, 'Predictions'][[1]],
Actual = test_y
)
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
View(test_combined)
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_preds_list[[3]][9, 'Predictions'][[1]]
)
reticulate::repl_python()
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
t
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\Jessie PC\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_train_y")
test_y = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Comb_test_y")
train_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_training_predictions_pysr_Full")
test_y_pred = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_test_predictions_pysr_Full")
train_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_training_predictions_pysr_PCA")
test_y_pred_pca = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_test_predictions_pysr_PCA")
train_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_training_predictions_pysr_Elastic")
test_y_pred_elastic = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/Combined_test_predictions_pysr_Elastic")
train_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/training_predictions_rf_Full")
test_y_pred_rf = pd.read_pickle("3_Data_intermediates/4_ChemOmics_measurements/test_predictions_rf_Full")
# Store the inputs (Full, PCA, Elastic) in a list
input_names = ['Full', 'PCA', 'Elastic', 'RF']
train_preds_list = [train_y_pred, train_y_pred_pca, train_y_pred_elastic, train_y_pred_rf]
test_preds_list = [test_y_pred, test_y_pred_pca, test_y_pred_elastic, test_y_pred_rf]
View(train_y_pred)
quit
df <- read.csv('..\\..\\3_Data_intermediates\\4_ChemOmics_measurements\\Comb_rmse_values_pysr_Elastic.csv')
