}))
View(dat_list)
View(dat_list[["Full"]])
colnames(dat_list[[1]])[2] <- 'gene'
scale_to_range <- function(x, min_range = -1, max_range = 1) {
min_x <- min(x, na.rm = TRUE)
max_x <- max(x, na.rm = TRUE)
(x - min_x) / (max_x - min_x) * (max_range - min_range) + min_range
}
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat %>%
# mutate(var_importance = var_importance / max(abs(var_importance))) %>%
# mutate(var_importance = scale_to_range(var_importance, -1, 1)) %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
View(dat_list)
View(dat_list[["Full"]])
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Clean names in dat_list
colnames(dat_list[[1]])[1] <- 'gene'
colnames(dat_list[[1]])[2] <- 'gene'
dat_list[[1]] <- left_join(dat_list[[1]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
View(dat_list)
View(dat_list[["Full"]])
# Load in summed importance values
dat_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Full.csv')
dat_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_PCA.csv')
dat_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
names(dat_list) <- c("Full", "PCA", "Elastic")
# Load in full importance values
dat_all_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Full.csv')
dat_all_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_PCA.csv')
dat_all_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Elastic.csv')
# Put in list
dat_all_list <- list(dat_all_full, dat_all_pca, dat_all_elastic)
names(dat_all_list) <- c("Full", "PCA", "Elastic")
# read in gene names
degs <- read.csv('..\\..\\1_Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\all_genes_in_hof.csv')
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Clean names in dat_list
colnames(dat_list[[1]])[1] <- 'gene'
colnames(dat_list[[1]])[2] <- 'gene'
dat_list[[1]] <- left_join(dat_list[[1]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
View(dat_all_list)
View(dat_list)
View(dat_list[["Full"]])
# Load in summed importance values
dat_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Full.csv')
dat_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_PCA.csv')
dat_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
names(dat_list) <- c("Full", "PCA", "Elastic")
# Load in full importance values
dat_all_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Full.csv')
dat_all_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_PCA.csv')
dat_all_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Elastic.csv')
# Put in list
dat_all_list <- list(dat_all_full, dat_all_pca, dat_all_elastic)
names(dat_all_list) <- c("Full", "PCA", "Elastic")
# read in gene names
degs <- read.csv('..\\..\\1_Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\all_genes_in_hof.csv')
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Clean names in dat_list
colnames(dat_list[[1]])[1] <- 'gene'
colnames(dat_list[[2]])[1] <- 'gene'
dat_list[[1]] <- left_join(dat_list[[1]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_list[[3]])[1] <- 'gene'
dat_list[[3]] <- left_join(dat_list[[3]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
# Merge with gene names for IPA
genes_clean <- left_join(genes, degs_clean) %>%
select(Gene_Symbol) %>%
unique()
write.csv(genes_clean, file = '..\\..\\4_Model_results\\3_Omic_measurements\\all_genes_in_hof_clean.csv' )
scale_to_range <- function(x, min_range = -1, max_range = 1) {
min_x <- min(x, na.rm = TRUE)
max_x <- max(x, na.rm = TRUE)
(x - min_x) / (max_x - min_x) * (max_range - min_range) + min_range
}
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat %>%
# mutate(var_importance = var_importance / max(abs(var_importance))) %>%
# mutate(var_importance = scale_to_range(var_importance, -1, 1)) %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
View(dat_list)
View(dat_list[["Full"]])
View(dat_list[["PCA"]])
View(dat_list[["Elastic"]])
View(dat_list)
View(dat_list[["PCA"]])
View(dat_list[["Full"]])
# Load in summed importance values
dat_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Full.csv')
dat_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_PCA.csv')
dat_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
names(dat_list) <- c("Full", "PCA", "Elastic")
# Load in full importance values
dat_all_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Full.csv')
dat_all_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_PCA.csv')
dat_all_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Elastic.csv')
# Put in list
dat_all_list <- list(dat_all_full, dat_all_pca, dat_all_elastic)
names(dat_all_list) <- c("Full", "PCA", "Elastic")
# read in gene names
degs <- read.csv('..\\..\\1_Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\all_genes_in_hof.csv')
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Clean names in dat_list
colnames(dat_list[[1]])[1] <- 'gene'
colnames(dat_list[[2]])[1] <- 'Gene_Symbol'
dat_list[[1]] <- left_join(dat_list[[1]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_list[[3]])[1] <- 'gene'
dat_list[[3]] <- left_join(dat_list[[3]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
# Merge with gene names for IPA
genes_clean <- left_join(genes, degs_clean) %>%
select(Gene_Symbol) %>%
unique()
write.csv(genes_clean, file = '..\\..\\4_Model_results\\3_Omic_measurements\\all_genes_in_hof_clean.csv' )
scale_to_range <- function(x, min_range = -1, max_range = 1) {
min_x <- min(x, na.rm = TRUE)
max_x <- max(x, na.rm = TRUE)
(x - min_x) / (max_x - min_x) * (max_range - min_range) + min_range
}
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat %>%
# mutate(var_importance = var_importance / max(abs(var_importance))) %>%
# mutate(var_importance = scale_to_range(var_importance, -1, 1)) %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Subset
combined_dat <- combined_dat %>%
filter(dataset != 'PCA')
p <- ggplot(combined_dat, aes(x = reorder_within(Chemical, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chemical", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free")
# Print the combined plot
print(p)
View(combined_dat)
p <- ggplot(combined_dat, aes(x = reorder_within(Gene_Symbol, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene_Symbol", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free")
p
scale_to_range <- function(x, min_range = -1, max_range = 1) {
min_x <- min(x, na.rm = TRUE)
max_x <- max(x, na.rm = TRUE)
(x - min_x) / (max_x - min_x) * (max_range - min_range) + min_range
}
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat %>%
# mutate(var_importance = var_importance / max(abs(var_importance))) %>%
# mutate(var_importance = scale_to_range(var_importance, -1, 1)) %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1 | i ==3) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Subset
combined_dat <- combined_dat %>%
filter(dataset != 'PCA')
p <- ggplot(combined_dat, aes(x = reorder_within(Gene_Symbol, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene_Symbol", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free")
# Print the combined plot
print(p)
# # Save
# plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/variable_importance_all.png')
# ggsave(plot_filename, p, width = 3.5, height = 4)
p
scale_to_range <- function(x, min_range = -1, max_range = 1) {
min_x <- min(x, na.rm = TRUE)
max_x <- max(x, na.rm = TRUE)
(x - min_x) / (max_x - min_x) * (max_range - min_range) + min_range
}
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat %>%
# mutate(var_importance = var_importance / max(abs(var_importance))) %>%
# mutate(var_importance = scale_to_range(var_importance, -1, 1)) %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1 | i ==3) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Subset
combined_dat <- combined_dat %>%
filter(dataset != 'PCA')
p <- ggplot(combined_dat, aes(x = reorder_within(Gene_Symbol, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene_Symbol", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free")
# Print the combined plot
print(p)
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
plot_filename <- paste0('..\\..\\5_Plots\\3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
# Load in summed importance values
dat_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Full.csv')
dat_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_PCA.csv')
dat_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\variable_importance_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
names(dat_list) <- c("Full", "PCA", "Elastic")
# Load in full importance values
dat_all_full <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Full.csv')
dat_all_pca <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_PCA.csv')
dat_all_elastic <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\pysr\\partial_deriv_Elastic.csv')
# Put in list
dat_all_list <- list(dat_all_full, dat_all_pca, dat_all_elastic)
names(dat_all_list) <- c("Full", "PCA", "Elastic")
# read in gene names
degs <- read.csv('..\\..\\1_Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('..\\..\\4_Model_results\\3_Omic_measurements\\all_genes_in_hof.csv')
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Clean names in dat_list
colnames(dat_list[[1]])[1] <- 'gene'
colnames(dat_list[[2]])[1] <- 'Gene_Symbol'
dat_list[[1]] <- left_join(dat_list[[1]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_list[[3]])[1] <- 'gene'
dat_list[[3]] <- left_join(dat_list[[3]], degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
# Merge with gene names for IPA
genes_clean <- left_join(genes, degs_clean) %>%
select(Gene_Symbol) %>%
unique()
write.csv(genes_clean, file = '..\\..\\4_Model_results\\3_Omic_measurements\\all_genes_in_hof_clean.csv' )
scale_to_range <- function(x, min_range = -1, max_range = 1) {
min_x <- min(x, na.rm = TRUE)
max_x <- max(x, na.rm = TRUE)
(x - min_x) / (max_x - min_x) * (max_range - min_range) + min_range
}
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat %>%
# mutate(var_importance = var_importance / max(abs(var_importance))) %>%
# mutate(var_importance = scale_to_range(var_importance, -1, 1)) %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1 | i ==3) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Subset
combined_dat <- combined_dat %>%
filter(dataset != 'PCA')
p <- ggplot(combined_dat, aes(x = reorder_within(Gene_Symbol, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene_Symbol", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free")
# Print the combined plot
print(p)
# Save
plot_filename <- paste0('..\\..\\5_Plots\\3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
