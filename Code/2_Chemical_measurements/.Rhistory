mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Create plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted", title = paste("Prediction Spread -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot with a unique filename
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/prediction_spread_', input_name, '.png')
ggsave(plot_filename, p)
}
# Assign the list from Python to R variables
input_names <- py$input_names
train_preds_list <- py$train_preds_list
test_preds_list <- py$test_preds_list
train_y <- py$train_y
test_y <- py$test_y
# Iterate through the input list
for (i in seq_along(input_names)) {
# Get the current input name, training, and test predictions
input_name <- input_names[[i]]
train_y_pred <- train_preds_list[[i]]
test_y_pred <- test_preds_list[[i]]
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Plot testing data
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Create plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted", title = paste("Prediction Spread -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot with a unique filename
plot_filename <- paste0('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/prediction_spread_', input_name, '.png')
ggsave(plot_filename, p)
}
library(tidyverse)
library(reticulate)
repl_python()
import pandas as pd
import pickle
import os
# Set working directory
os.chdir(r"C:\Users\jrchapp3\OneDrive - University of North Carolina at Chapel Hill\Symbolic_regression_github\NIH_Cloud_NOSI")
# Load in data
train_y = pd.read_pickle("Data_inputs/3_Omic_measurements/train_y")
test_y = pd.read_pickle("Data_inputs/3_Omic_measurements/test_y")
train_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/training_predictions")
test_y_pred = pd.read_pickle("Data_inputs/3_Omic_measurements/test_predictions")
quit
train_y <- py$train_y
test_y <- py$test_y
train_y_pred <- py$train_y_pred
test_y_pred <- py$test_y_pred
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/prediction_spread.png',p)
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/prediction_spread.png',p)
View(test_df)
# Create the bar and red dash plot
p_bar <- ggplot(test_df, aes(x = Group, y = Actual, fill = Group)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Group", y = "Value", title = paste("Actual vs Predicted -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p_bar
p_bar <- ggplot(test_df, aes(x = rownames(test_df), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Value", title = paste("Actual vs Predicted -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate individual labels
p_bar
ggsave('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/actual_vs_predicted.png',p_bar)
# Assign the list from Python to R variables
input_names <- py$input_names
train_preds_list <- py$train_preds_list
test_preds_list <- py$test_preds_list
train_y <- py$train_y
test_y <- py$test_y
# Iterate through the input list
for (i in seq_along(input_names)) {
# Get the current input name, training, and test predictions
input_name <- input_names[[i]]
train_y_pred <- train_preds_list[[i]]
test_y_pred <- test_preds_list[[i]]
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Plot testing data
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Create plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted", title = paste("Prediction Spread -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot with a unique filename
plot_filename <- paste0('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/prediction_spread_', input_name, '.png')
ggsave(plot_filename, p)
# Create the bar and red dash plot for each individual
p_bar <- ggplot(test_df, aes(x = rownames(test_df), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Value", title = paste("Actual vs Predicted -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate individual labels
# Save the plot with a unique filename
plot_filename_bar <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/actual_vs_predicted_', input_name, '.png')
ggsave(plot_filename_bar, p_bar)
}
# Assign the list from Python to R variables
input_names <- py$input_names
train_preds_list <- py$train_preds_list
test_preds_list <- py$test_preds_list
train_y <- py$train_y
test_y <- py$test_y
# Iterate through the input list
for (i in seq_along(input_names)) {
# Get the current input name, training, and test predictions
input_name <- input_names[[i]]
train_y_pred <- train_preds_list[[i]]
test_y_pred <- test_preds_list[[i]]
# Combine training data into one DataFrame with 'Actual' and 'Predicted' columns
train_combined <- data.frame(
Actual = train_y,
Predicted = train_y_pred[,1]
)
# Combine testing data into one DataFrame with 'Actual' and 'Predicted' columns
test_combined <- data.frame(
Actual = test_y,
Predicted = test_y_pred[,1]
)
# Plot testing data
# Calculate difference between actual and predicted
test_df <- test_combined %>%
mutate(Dif = Actual - Predicted)
# Extract the rownames and modify them to contain only the part before the first '_'
Group <- gsub("_.*", "", rownames(test_df))
# Add 'Group' as a new column to your dataframe
test_df$Group <- Group
# Create plot
p <- ggplot(test_df, aes(x = Group, y = Dif, fill = Group)) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
labs(x = "Group", y = "Actual - Predicted", title = paste("Prediction Spread -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot with a unique filename
plot_filename <- paste0('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/prediction_spread_', input_name, '.png')
ggsave(plot_filename, p)
# Create the bar and red dash plot for each individual
p_bar <- ggplot(test_df, aes(x = rownames(test_df), y = Actual, fill = Group)) +
geom_bar(stat = "identity", alpha = 0.7) +  # Bars for 'Actual'
geom_point(aes(y = Predicted), color = "red", size = 3, shape = 95) +  # Red dash for 'Predicted'
labs(x = "Individual", y = "Value", title = paste("Actual vs Predicted -", input_name)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate individual labels
# Save the plot with a unique filename
plot_filename_bar <- paste0('C:/Users/jrchapp3/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/2_Chemical_measurements/pysr/actual_vs_predicted_', input_name, '.png')
ggsave(plot_filename_bar, p_bar)
}
dat <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Full.csv')
View(dat)
library(tidyverse)
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction))
View(dat_sum)
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
View(dat_sum)
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique() %>%
arrange(desc(abs(sum_dir))) %>%
slice(1:10)
# Create bar chart
p <- ggplot(dat_sum_top10, aes(x = reorder(chem, -sum_dir), y = sum_dir)) +
geom_bar(stat = "identity") +
labs(title = "Importance", x = "Chem", y = "Sum Direction (sum_dir)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique() %>%
arrange(desc(abs(sum_dir))) %>%
slice(1:10)
# Create bar chart
p <- ggplot(dat_sum, aes(x = reorder(chem, -sum_dir), y = sum_dir)) +
geom_bar(stat = "identity") +
labs(title = "Importance", x = "Chem", y = "Sum Direction (sum_dir)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique() %>%
arrange(desc(abs(sum_dir))) %>%
slice(1:10)
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
slice(1:10)
View(dat_top)
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique() %>%
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
.[10,]
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
.[10,]
View(dat_top)
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir)))
dat_top <- dat_top[10,]
View(dat_top)
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir)))
View(dat_top)
dat_top <- dat_top[1:10,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir)) +
geom_bar(stat = "identity") +
labs(title = "Importance", x = "Chem", y = "Sum Direction (sum_dir)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir)))
dat_top <- dat_top[1:10,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
dat <- read.csv('C:\\Users\\jrchapp3\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\partial_deriv.csv')
View(dat)
dat_sum <- dat %>%
group_by(gene) %>%
mutate(sum_dir = sum(direction)) %>%
select(gene, sum_dir) %>%
unique()
View(dat_sum)
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir)))
dat_top <- dat_top[1:10,]
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
p <- ggplot(dat_top, aes(x = reorder(gene, -sum_dir), y = sum_dir)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Lasso.csv')
dat_pca <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_PCA.csv')
dat_elastic <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Elastic.csv')
View(dat_full)
View(dat_pca)
dat_list <- list(dat_full, dat_pca, dat_elastic)
dat_list
i<-1
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
library(tidyverse)
library(reticulate)
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Subset to relevant data
dat <- dat_list[[i]]
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Add direction
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
View(dat_top)
View(dat)
for(i in 1:length(dat_list)){
# Subset to relevant data
dat <- dat_list[[i]]
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Add direction
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
# dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
for(i in 1:length(dat_list)){
# Subset to relevant data
dat <- dat_list[[i]]
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Add direction
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
# dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Lasso.csv')
dat_pca <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_PCA.csv')
dat_elastic <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
for(i in 1:length(dat_list)){
# Subset to relevant data
dat <- dat_list[[i]]
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Add direction
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
# dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Full.csv')
dat_pca <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_PCA.csv')
dat_elastic <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\2_Chemical_measurements\\pysr\\partial_deriv_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
for(i in 1:length(dat_list)){
# Subset to relevant data
dat <- dat_list[[i]]
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Add direction
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
# dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
for(i in 1:length(dat_list)){
# Subset to relevant data
dat <- dat_list[[i]]
# Calculate importance
dat_sum <- dat %>%
group_by(chem) %>%
mutate(sum_dir = sum(direction)) %>%
select(chem, sum_dir) %>%
unique()
# Add direction
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
if(i==1){
dat_top <- dat_top[1:15,]
}
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(chem, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chem", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
