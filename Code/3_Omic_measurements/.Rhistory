library(tidyverse)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\partial_deriv.csv')
dat_sum <- dat %>%
group_by(gene) %>%
mutate(sum_dir = sum(direction)) %>%
select(gene, sum_dir) %>%
unique()
dat_top <- dat_sum %>%
arrange(desc(abs(sum_dir))) %>%
mutate(Association = ifelse(sum_dir > 0, "Positively associated", "Negatively associated"))
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -sum_dir), y = sum_dir, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positively associated" = "darkred", "Negatively associated" = "darkblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
View(dat)
library(tidyverse)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\variable_importance.csv')
dat_all <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\partial_deriv.csv')
degs <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\all_genes_in_hof.csv')
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_clean)[2] <- 'gene'
# Merge with gene names for IPA
genes_clean <- left_join(genes, degs_clean) %>%
select(Gene_Symbol) %>%
unique()
write.csv(genes_clean, file = 'C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\all_genes_in_hof_clean.csv' )
View(genes_clean)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\3_Omic_measurements\\variable_importance.csv')
degs <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\3_Omic_measurements\\all_genes_in_hof.csv')
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\3_Omic_measurements\\variable_importance.csv')
degs <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\3_Omic_measurements\\all_genes_in_hof.csv')
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_clean)[2] <- 'gene'
# Merge with gene names for IPA
genes_clean <- left_join(genes, degs_clean) %>%
select(Gene_Symbol) %>%
unique()
write.csv(genes_clean, file = 'C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\3_Omic_measurements\\all_genes_in_hof_clean.csv' )
View(genes_clean)
library(tidyverse)
library(reticulate)
library(tidytext)
dat_full <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\pysr\\variable_importance_Full.csv')
dat_pca <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\pysr\\variable_importance_PCA.csv')
dat_elastic <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Albumin_runs\\Models\\2_Chemical_measurements\\pysr\\variable_importance_Elastic.csv')
# Put in list
dat_list <- list(dat_full, dat_pca, dat_elastic)
# Names for the datasets
dataset_names <- c("Full", "PCA", "Elastic")
# Combine all data into a single DataFrame with an identifier for each dataset
combined_dat <- do.call(rbind, lapply(1:length(dat_list), function(i) {
dat <- dat_list[[i]]
dat_top <- dat %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset only the top 15 for the first dataset
if (i == 1) {
dat_top <- dat_top[1:15, ]
}
# Add a column indicating the dataset name
dat_top$dataset <- dataset_names[i]
return(dat_top)
}))
# Clean up names for combined_dat
combined_dat <- combined_dat %>%
mutate(chem = str_remove(chem, pattern = '_')) %>%
mutate(chem = str_remove(chem, pattern = 'var26')) %>%
mutate(chem = ifelse(chem == 'Benzoapyrene', 'Benzo[a]pyrene', chem)) %>%
mutate(chem = ifelse(chem == 'Dimethylnaphthalene', '2,6-Dimethylnaphthalene', chem)) %>%
mutate(chem = ifelse(chem == 'Benzaanthracene', 'Benz(a)anthracene', chem)) %>%
mutate(chem = ifelse(chem == 'Methoxymethylphenol', 'Methoxymethyl phenol', chem)) %>%
mutate(chem = ifelse(chem == 'var35Dimethoxyphenol', '3,5-Dimethoxyphenol', chem))
# Set order
combined_dat$dataset <- factor(combined_dat$dataset, levels = c('Full', 'PCA', 'Elastic'))
# Subset for presentation
combined_dat <- combined_dat %>%
filter(dataset != 'PCA')
# Create the combined plot using facet_wrap and allowing each facet to have its own x-axis
p <- ggplot(combined_dat, aes(x = reorder_within(chem, -var_importance, dataset), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Chemical", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
scale_x_reordered() +  # Add this line to clean up x-axis labels
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
) +
facet_grid(. ~ dataset, scales = "free_x", space = "free") +
labs(x = 'Chemical')
# Print the combined plot
print(p)
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/Albumin_runs/images/2_Chemical_measurements/pysr/variable_importance_all.png')
ggsave(plot_filename, p, width = 7, height = 4)
print(p)
p
library(tidyverse)
dat <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\variable_importance.csv')
dat_all <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\partial_deriv.csv')
degs <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Data_inputs\\3_Omic_measurements\\DEGs.csv') %>%
.[,4:5]
genes <- read.csv('C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\all_genes_in_hof.csv')
# Rewrite cleaning function from python
clean_column_values <- function(df, column_name) {
df[[column_name]] <- sapply(df[[column_name]], function(name) {
if (name == "S") {
"Sulphur"
} else if (name == "Si") {
"Silicon"
} else {
cleaned_name <- gsub("\\W+", "", name) # Remove non-alphanumeric characters
cleaned_name <- gsub("([a-zA-Z])(\\d)", "\\1_\\2", cleaned_name) # Insert underscore between letters and digits
cleaned_name <- gsub("(\\d)([a-zA-Z])", "\\1_\\2", cleaned_name) # Insert underscore between digits and letters
if (grepl("^[0-9]", cleaned_name)) { # Check if the name starts with a digit
cleaned_name <- paste0("var", cleaned_name)
}
cleaned_name
}
})
return(df)
}
# Apply to biospyder IDs
degs_clean <- clean_column_values(degs, "BioSpyder_Identifier")
colnames(degs_clean)[1] <- 'gene'
# Merge with data
dat_clean <- left_join(dat, degs_clean, by = 'gene') %>%
select(-gene) %>%
unique()
colnames(dat_clean)[2] <- 'gene'
# Merge with gene names for IPA
genes_clean <- left_join(genes, degs_clean) %>%
select(Gene_Symbol) %>%
unique()
write.csv(genes_clean, file = 'C:\\Users\\Jessie PC\\OneDrive - University of North Carolina at Chapel Hill\\Symbolic_regression_github\\NIH_Cloud_NOSI\\Models\\3_Omic_measurements\\all_genes_in_hof_clean.csv' )
# Add directionality
dat_top <- dat_clean %>%
arrange(desc(abs(var_importance))) %>%
mutate(Association = ifelse(var_importance > 0, "Positive", "Negative"))
# Subset to top 15
dat_top <- dat_top[1:15,]
# Create bar chart
p <- ggplot(dat_top, aes(x = reorder(gene, -var_importance), y = var_importance, fill = Association)) +
geom_bar(stat = "identity") +
labs(x = "Gene", y = "Directional importance") +
scale_fill_manual(values = c("Positive" = "grey", "Negative" = "black")) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.position = "bottom"
)
p
# Save
plot_filename <- paste0('C:/Users/Jessie PC/OneDrive - University of North Carolina at Chapel Hill/Symbolic_regression_github/NIH_Cloud_NOSI/images/3_Omic_measurements/variable_importance_all.png')
ggsave(plot_filename, p, width = 3.5, height = 4)
