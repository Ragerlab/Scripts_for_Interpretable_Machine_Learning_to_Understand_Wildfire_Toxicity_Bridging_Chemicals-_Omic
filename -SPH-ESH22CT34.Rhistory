for k in range(len(subset_df)):
try:
print(k)
# Get the equation
equation_str = subset_df.iloc[k]['equation']
# Convert the equation string to a sympy expression
equation_sympy = sp.sympify(equation_str)
# Compute the partial derivative of the equation with respect to the chemical
partial_derivative = sp.diff(equation_sympy, chem)
# Extract only the real part of the partial_derivative
real_part = sp.re(partial_derivative)
# Identify all variables in the equation
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# Determine the direction based on the integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
results_df.loc[len(results_df)] = {
"chem": chem,
"sympy_equation": equation_sympy,
"parital derivative w/ respect to chem": partial_derivative,
"integrated_derivative": integrated_derivative,
"direction": direction
}
chem = chems[j]
j=
j=0
chem = chems[j]
# Iterate through each chemical
for j in range(len(chems)):
print(j)
# sys.stdout.write(f"{j}\n")
# sys.stdout.flush()
# Chemical of interest
chem = chems[j]
# Subset HOF to only equations containing this chemical
subset_df = combined_hof_df[combined_hof_df['equation'].str.contains(rf'\b{chem}\b', na=False)]
# Iterate through each row in the subset DataFrame
for k in range(len(subset_df)):
try:
print(k)
# Get the equation
equation_str = subset_df.iloc[k]['equation']
# Convert the equation string to a sympy expression
equation_sympy = sp.sympify(equation_str)
# Compute the partial derivative of the equation with respect to the chemical
partial_derivative = sp.diff(equation_sympy, chem)
# Extract only the real part of the partial_derivative
real_part = sp.re(partial_derivative)
# Identify all variables in the equation
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# Determine the direction based on the integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
results_df.loc[len(results_df)] = {
"chem": chem,
"sympy_equation": equation_sympy,
"parital derivative w/ respect to chem": partial_derivative,
"integrated_derivative": integrated_derivative,
"direction": direction
}
# Subset to the relevant DataFrame
key = keys[idx]
combined_hof_df = hof_dataframes[key]
print(f"Processing subdirectory: {key}")
# Get all chemical names from the equations
chems = set()
# Iterate through each row to extract chemicals
for equation in combined_hof_df['equation']:
# Convert the string equation to a sympy expression
expr = sp.sympify(equation)
# Get the free symbols
chems.update(expr.free_symbols)
# Convert the set to a list
chems = list(chems)
# Initialize df to hold results for each subdirectory
results_df = pd.DataFrame(columns=["chem", "sympy_equation", "parital derivative w/ respect to chem", "integrated_derivative", "direction"])
# Iterate through each chemical
for j in range(len(chems)):
print(j)
# sys.stdout.write(f"{j}\n")
# sys.stdout.flush()
# Chemical of interest
chem = chems[j]
# Subset HOF to only equations containing this chemical
subset_df = combined_hof_df[combined_hof_df['equation'].str.contains(rf'\b{chem}\b', na=False)]
# Iterate through each row in the subset DataFrame
for k in range(len(subset_df)):
try:
print(k)
# Get the equation
equation_str = subset_df.iloc[k]['equation']
# Convert the equation string to a sympy expression
equation_sympy = sp.sympify(equation_str)
# Compute the partial derivative of the equation with respect to the chemical
partial_derivative = sp.diff(equation_sympy, chem)
# Extract only the real part of the partial_derivative
real_part = sp.re(partial_derivative)
# Identify all variables in the equation
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# Determine the direction based on the integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
results_df.loc[len(results_df)] = {
"chem": chem,
"sympy_equation": equation_sympy,
"parital derivative w/ respect to chem": partial_derivative,
"integrated_derivative": integrated_derivative,
"direction": direction
}
idx
j
# Subset to the relevant DataFrame
key = keys[idx]
combined_hof_df = hof_dataframes[key]
print(f"Processing subdirectory: {key}")
# Get all chemical names from the equations
chems = set()
# Iterate through each row to extract chemicals
for equation in combined_hof_df['equation']:
# Convert the string equation to a sympy expression
expr = sp.sympify(equation)
# Get the free symbols
chems.update(expr.free_symbols)
# Convert the set to a list
chems = list(chems)
# Initialize df to hold results for each subdirectory
results_df = pd.DataFrame(columns=["chem", "sympy_equation", "parital derivative w/ respect to chem", "integrated_derivative", "direction"])
chem = chems[j]
chwma
chems
chems = list(chems)
chems
chem = chems[j]
# Iterate through each chemical
for j in range(len(chems)):
print(j)
# sys.stdout.write(f"{j}\n")
# sys.stdout.flush()
# Chemical of interest
chem = chems[j]
# Subset HOF to only equations containing this chemical
subset_df = combined_hof_df[combined_hof_df['equation'].str.contains(rf'\b{chem}\b', na=False)]
# Iterate through each row in the subset DataFrame
for k in range(len(subset_df)):
try:
print(k)
# Get the equation
equation_str = subset_df.iloc[k]['equation']
# Convert the equation string to a sympy expression
equation_sympy = sp.sympify(equation_str)
# Compute the partial derivative of the equation with respect to the chemical
partial_derivative = sp.diff(equation_sympy, chem)
# Extract only the real part of the partial_derivative
real_part = sp.re(partial_derivative)
# Identify all variables in the equation
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# Determine the direction based on the integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
results_df.loc[len(results_df)] = {
"chem": chem,
"sympy_equation": equation_sympy,
"parital derivative w/ respect to chem": partial_derivative,
"integrated_derivative": integrated_derivative,
"direction": direction
}
chem
subset_Df
subset_df
subset_df = combined_hof_df[combined_hof_df['equation'].str.contains(rf'\b{chem}\b', na=False)]
subset_df
k=0
# Get the equation
equation_str = subset_df.iloc[k]['equation']
# Convert the equation string to a sympy expression
equation_sympy = sp.sympify(equation_str)
# Compute the partial derivative of the equation with respect to the chemical
partial_derivative = sp.diff(equation_sympy, chem)
# Extract only the real part of the partial_derivative
real_part = sp.re(partial_derivative)
# Identify all variables in the equation
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
equation_str
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
integrated_derivative = sp.integrate(real_part, *integration_ranges)
integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
results_df.loc[len(results_df)] = {
"chem": chem,
"sympy_equation": equation_sympy,
"parital derivative w/ respect to chem": partial_derivative,
"integrated_derivative": integrated_derivative,
"direction": direction
}
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# Determine the direction based on the integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
# Iterate through relevant DataFrames
for idx in range(len(keys)):
# Subset to the relevant DataFrame
key = keys[idx]
combined_hof_df = hof_dataframes[key]
print(f"Processing subdirectory: {key}")
# Get all chemical names from the equations
chems = set()
# Iterate through each row to extract chemicals
for equation in combined_hof_df['equation']:
# Convert the string equation to a sympy expression
expr = sp.sympify(equation)
# Get the free symbols
chems.update(expr.free_symbols)
# Convert the set to a list
chems = list(chems)
# Initialize df to hold results for each subdirectory
results_df = pd.DataFrame(columns=["chem", "sympy_equation", "parital derivative w/ respect to chem", "integrated_derivative", "direction"])
# Iterate through each chemical
for j in range(len(chems)):
print(j)
# sys.stdout.write(f"{j}\n")
# sys.stdout.flush()
# Chemical of interest
chem = chems[j]
# Subset HOF to only equations containing this chemical
subset_df = combined_hof_df[combined_hof_df['equation'].str.contains(rf'\b{chem}\b', na=False)]
# Iterate through each row in the subset DataFrame
for k in range(len(subset_df)):
try:
print(k)
# Get the equation
equation_str = subset_df.iloc[k]['equation']
# Convert the equation string to a sympy expression
equation_sympy = sp.sympify(equation_str)
# Compute the partial derivative of the equation with respect to the chemical
partial_derivative = sp.diff(equation_sympy, chem)
# Extract only the real part of the partial_derivative
real_part = sp.re(partial_derivative)
# Identify all variables in the equation
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# Determine the direction based on the integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
results_df.loc[len(results_df)] = {
"chem": chem,
"sympy_equation": equation_sympy,
"parital derivative w/ respect to chem": partial_derivative,
"integrated_derivative": integrated_derivative,
"direction": direction
}
# Save results for each subdirectory
results_file_name = f'Models/2_Chemical_measurements/pysr/partial_deriv_{key}.csv'
results_df.to_csv(results_file_name, index=False)
idx
# Subset to the relevant DataFrame
key = keys[idx]
combined_hof_df = hof_dataframes[key]
print(f"Processing subdirectory: {key}")
# Get all chemical names from the equations
chems = set()
chems
# Iterate through each row to extract chemicals
for equation in combined_hof_df['equation']:
# Convert the string equation to a sympy expression
expr = sp.sympify(equation)
# Get the free symbols
chems.update(expr.free_symbols)
# Convert the set to a list
chems = list(chems)
chems
results_df = pd.DataFrame(columns=["chem", "sympy_equation", "parital derivative w/ respect to chem", "integrated_derivative", "direction"])
j
chem = chems[j]
chems = list(chems)
chem = chems[j]
subset_df = combined_hof_df[combined_hof_df['equation'].str.contains(rf'\b{chem}\b', na=False)]
k
equation_str = subset_df.iloc[k]['equation']
equation_sympy = sp.sympify(equation_str)
partial_derivative = sp.diff(equation_sympy, chem)
real_part = sp.re(partial_derivative)
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# Determine the direction based on the integrated_derivative
if integrated_derivative > 0:
direction = "positive"
elif integrated_derivative < 0:
direction = "negative"
else:
direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
for k in range(len(subset_df)):
try:
print(k)
# Get the equation
equation_str = subset_df.iloc[k]['equation']
# Convert the equation string to a sympy expression
equation_sympy = sp.sympify(equation_str)
# Compute the partial derivative of the equation with respect to the chemical
partial_derivative = sp.diff(equation_sympy, chem)
# Extract only the real part of the partial_derivative
real_part = sp.re(partial_derivative)
# Identify all variables in the equation
all_symbols = list(partial_derivative.free_symbols)
# Ensure that 'chem' is included in the integration variables
if chem not in all_symbols:
all_symbols.append(chem)
# Define the ranges for all variables in the partial derivative
integration_ranges = []
for sym in all_symbols:
sym_str = str(sym)  # Convert sympy symbol to string to match the keys in chemical_ranges
range_values = chemical_ranges.get(sym_str)
a, b = range_values  # Unpack the range values
integration_ranges.append((sym, a, b))
# Integrate
integrated_derivative = sp.integrate(real_part, *integration_ranges)
# # Determine the direction based on the integrated_derivative
# if integrated_derivative > 0:
#     direction = "positive"
# elif integrated_derivative < 0:
#     direction = "negative"
# else:
#     direction = "neutral"
except Exception as e:
# If there's an issue, log the error message in the 'derivative' column
partial_derivative = f"Error"
integrated_derivative = "Error"
direction = "Error"
results_df.loc[len(results_df)] = {
"chem": chem,
"sympy_equation": equation_sympy,
"parital derivative w/ respect to chem": partial_derivative,
"integrated_derivative": integrated_derivative,
"direction": direction
}
